name: Deploy AFA - Cattle API

on:
  workflow_dispatch:
    inputs:
      env:
        type: choice
        description: Environment
        required: true
        options:
        - dev
        - test
        - prod

env:
  functionAppName: 'app-cattle-api'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.env }}

    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v3

      # Log into Azure
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}     

      # Get secrets from Azure KeyVault
    - name: Get Secrets
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: "${{ secrets.KEYVAULTNAME }}"
        secrets: 'ContainerRegistryLoginServer, ContainerRegistryUsername, ContainerRegistryPassword'
      id: azureSecrets

      # Login to the docker container registry
    - name: 'Login to Container Registry'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ steps.azureSecrets.output.ContainerRegistryLoginServer }}
        username: ${{ steps.azureSecrets.output.ContainerRegistryUsername }}
        password: ${{ steps.azureSecrets.output.ContainerRegistryPassword }}

      # Build and push the docker image to the container registry
    - name: 'Build and Push Docker Image'
      shell: bash
      run: |
        echo "::set-env name=imageName::${{ steps.azureSecrets.output.ContainerRegistryLoginServer }}/${{ env.functionAppName }}:$(date +'%Y%m%d%H%M%S')"
        cd ./AFA/Seges.DataEstate.Api"
        docker build -f Seges.DataEstate.Api.Cattle/Dockerfile -t ${{ env.imageName }} "." --force-rm
        docker push ${{ env.imageName }}

      # Dev: Update Azure Functions to use the new container
    - name: 'Dev: Update Azure Functions to use the new container'
      if: inputs.env == 'Development'
      uses: Azure/functions-container-action@v1
      with:
        app-name: "${{ env.functionAppName }}-dev"
        image: ${{ env.imageName }}

      # Test: Update Azure Functions to use the new container
    - name: 'Test: Update Azure Functions to use the new container'
      if: inputs.env == 'Test'
      uses: Azure/functions-container-action@v1
      with:
        app-name: "${{ env.functionAppName }}-test"
        image: ${{ env.imageName }}
      
      # Prod: Update Azure Functions to use the new container'
    - name: 'Prod: Update Azure Functions to use the new container'
      if: inputs.env == 'Production'
      uses: Azure/functions-container-action@v1
      with:
        app-name: "${{ env.functionAppName }}-prod"
        image: ${{ env.imageName }}

    - name: Azure logout
      run: |
        az logout
