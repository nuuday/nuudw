{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "nuudw-adf01-dev"
		},
		"Cubus31_PCTI_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "ConnectionString-Cubus-Cubus31-PCTI"
		},
		"Cubus_Masterdata_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "ConnectionString-Cubus-Masterdata"
		},
		"KeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://nuudw-kv01-dev.vault.azure.net/"
		},
		"NuuData_Chipper_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "ConnectionString-nuudatasqldb01"
		},
		"NuuData_Columbus_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "ConnectionString-nuudatasqldb01"
		},
		"datalake01ingestion_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakest01ingestiondev.dfs.core.windows.net"
		},
		"datalake01ingestionNetcracker_interim_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakest01ingestiondev.dfs.core.windows.net"
		},
		"datalakest01exploration_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakest01exploration.dfs.core.windows.net/"
		},
		"ingestsqldb01_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "ConnectionString-nuudlsql01ingestprod-ingestsqldb01"
		},
		"nuudwsqldb01_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "ConnectionString-nuudwsqldb01"
		},
		"NuuDW-OnPremiseIntegrationRuntime_properties_typeProperties_linkedInfo_resourceId": {
			"type": "string",
			"defaultValue": "/subscriptions/b05a2e18-2089-4864-80c8-7303371b246c/resourcegroups/sense-datafactory/providers/Microsoft.DataFactory/factories/SenseDF01/integrationruntimes/OnPrem-IntegrationRuntime-01"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/BRIDGE_0_UserAccess')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BRIDGE_1_UserAccess_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BRIDGE_1_UserAccess_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.5_Bridge"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/BRIDGE_1_UserAccess_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/BRIDGE_1_UserAccess_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BRIDGE_1_UserAccess_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_UserAccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadFact]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Bridge_UserAccess",
									"type": "String"
								},
								"DWTable": {
									"value": "UserAccess",
									"type": "String"
								},
								"DWSchema": {
									"value": "bridge",
									"type": "String"
								},
								"LoadPattern": {
									"value": "FactFull",
									"type": "String"
								},
								"IncrementalFlag": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"CleanUpPartitionsFlag": {
									"value": {
										"value": "@pipeline().parameters.CleanUpPartitions",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "Bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.5_Bridge"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BRIDGE_1_UserAccess_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Bridge_UserAccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Bridge_UserAccess",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.5_Bridge"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_Address')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Address_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Address_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Address_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Address_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_BillingAccount')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_BillingAccount_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_BillingAccount_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_BillingAccount_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_BillingAccount_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_Calendar')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_Calendar",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[meta].[CreateCalendarDimension]"
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_Customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Customer_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Customer_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Customer_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Customer_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_Employee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Employee_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Employee_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Employee_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Employee_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_FAM_ChipperIncident')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_ChipperIncident_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_ChipperIncident_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_ChipperIncident_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_ChipperIncident_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_FAM_ChipperStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_ChipperStatus_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_ChipperStatus_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_ChipperStatus_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_ChipperStatus_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_FAM_DatePeriods')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_DatePeriods_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_DatePeriods_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_DatePeriods_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_DatePeriods_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_FAM_Infrastructure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_Infrastructure_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_Infrastructure_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_Infrastructure_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_Infrastructure_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_FAM_OpenIncidentsGroup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_OpenIncidentsGroup_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_OpenIncidentsGroup_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_OpenIncidentsGroup_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_OpenIncidentsGroup_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_FAM_SalesChannel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_SalesChannel_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_SalesChannel_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_SalesChannel_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_SalesChannel_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_FAM_Technology')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_Technology_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_FAM_Technology_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_Technology_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_FAM_Technology_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_HouseHold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_HouseHold_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_HouseHold_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_HouseHold_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_HouseHold_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_Legacy_Customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Legacy_Customer_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Legacy_Customer_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Legacy_Customer_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Legacy_Customer_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_Legacy_Employee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Legacy_Employee_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Legacy_Employee_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Legacy_Employee_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Legacy_Employee_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_Legacy_Product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Legacy_Product_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Legacy_Product_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Legacy_Product_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Legacy_Product_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_OrderEvent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_OrderEvent_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_OrderEvent_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_OrderEvent_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_OrderEvent_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_PhoneDetail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_PhoneDetail_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_PhoneDetail_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_PhoneDetail_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_PhoneDetail_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_Product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Product_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Product_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Product_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Product_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_Quote')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Quote_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Quote_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Quote_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Quote_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_QuoteItem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_QuoteItem_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_QuoteItem_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_QuoteItem_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_QuoteItem_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_SalesChannel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_SalesChannel_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_SalesChannel_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_SalesChannel_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_SalesChannel_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_Subscription')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Subscription_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Subscription_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Subscription_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Subscription_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_Technology')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Technology_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Technology_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Technology_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Technology_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_ThirdPartyStore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_ThirdPartyStore_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_ThirdPartyStore_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_ThirdPartyStore_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_ThirdPartyStore_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_Ticket')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Ticket_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_Ticket_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Ticket_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_Ticket_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_0_TransactionState')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_TransactionState_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_1_TransactionState_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_1_TransactionState_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_1_TransactionState_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Address_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_Address",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_Address",
									"type": "String"
								},
								"DWTable": {
									"value": "Address",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Address_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_Address",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_Address",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_BillingAccount_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_BillingAccount",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_BillingAccount",
									"type": "String"
								},
								"DWTable": {
									"value": "BillingAccount",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_BillingAccount_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_BillingAccount",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_BillingAccount",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Customer_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_Customer",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_Customer",
									"type": "String"
								},
								"DWTable": {
									"value": "Customer",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Customer_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_Customer",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_Customer",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Employee_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_Employee",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_Employee",
									"type": "String"
								},
								"DWTable": {
									"value": "Employee",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Employee_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_Employee",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_Employee",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_ChipperIncident_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_FAM_ChipperIncident",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_FAM_ChipperIncident",
									"type": "String"
								},
								"DWTable": {
									"value": "FAM_ChipperIncident",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_ChipperIncident_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_FAM_ChipperIncident",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_FAM_ChipperIncident",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_ChipperStatus_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_FAM_ChipperStatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_FAM_ChipperStatus",
									"type": "String"
								},
								"DWTable": {
									"value": "FAM_ChipperStatus",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_ChipperStatus_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_FAM_ChipperStatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_FAM_ChipperStatus",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_DatePeriods_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_FAM_DatePeriods",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_FAM_DatePeriods",
									"type": "String"
								},
								"DWTable": {
									"value": "FAM_DatePeriods",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_DatePeriods_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_FAM_DatePeriods",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_FAM_DatePeriods",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_Infrastructure_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_FAM_Infrastructure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_FAM_Infrastructure",
									"type": "String"
								},
								"DWTable": {
									"value": "FAM_Infrastructure",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_Infrastructure_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_FAM_Infrastructure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_FAM_Infrastructure",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_OpenIncidentsGroup_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_FAM_OpenIncidentsGroup",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_FAM_OpenIncidentsGroup",
									"type": "String"
								},
								"DWTable": {
									"value": "FAM_OpenIncidentsGroup",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_OpenIncidentsGroup_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_FAM_OpenIncidentsGroup",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_FAM_OpenIncidentsGroup",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_SalesChannel_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_FAM_SalesChannel",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_FAM_SalesChannel",
									"type": "String"
								},
								"DWTable": {
									"value": "FAM_SalesChannel",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_SalesChannel_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_FAM_SalesChannel",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_FAM_SalesChannel",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_Technology_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_FAM_Technology",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_FAM_Technology",
									"type": "String"
								},
								"DWTable": {
									"value": "FAM_Technology",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_FAM_Technology_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_FAM_Technology",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_FAM_Technology",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_HouseHold_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_HouseHold",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_HouseHold",
									"type": "String"
								},
								"DWTable": {
									"value": "HouseHold",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_HouseHold_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_HouseHold",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_HouseHold",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Legacy_Customer_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_Legacy_Customer",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_Legacy_Customer",
									"type": "String"
								},
								"DWTable": {
									"value": "Legacy_Customer",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Legacy_Customer_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_Legacy_Customer",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_Legacy_Customer",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Legacy_Employee_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_Legacy_Employee",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_Legacy_Employee",
									"type": "String"
								},
								"DWTable": {
									"value": "Legacy_Employee",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Legacy_Employee_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_Legacy_Employee",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_Legacy_Employee",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Legacy_Product_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_Legacy_Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_Legacy_Product",
									"type": "String"
								},
								"DWTable": {
									"value": "Legacy_Product",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Legacy_Product_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_Legacy_Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_Legacy_Product",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_OrderEvent_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_OrderEvent",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_OrderEvent",
									"type": "String"
								},
								"DWTable": {
									"value": "OrderEvent",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_OrderEvent_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_OrderEvent",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_OrderEvent",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_PhoneDetail_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_PhoneDetail",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_PhoneDetail",
									"type": "String"
								},
								"DWTable": {
									"value": "PhoneDetail",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_PhoneDetail_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_PhoneDetail",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_PhoneDetail",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Product_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_Product",
									"type": "String"
								},
								"DWTable": {
									"value": "Product",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Product_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_Product",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_QuoteItem_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_QuoteItem",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_QuoteItem",
									"type": "String"
								},
								"DWTable": {
									"value": "QuoteItem",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_QuoteItem_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_QuoteItem",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_QuoteItem",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Quote_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_Quote",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_Quote",
									"type": "String"
								},
								"DWTable": {
									"value": "Quote",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Quote_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_Quote",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_Quote",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_SalesChannel_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_SalesChannel",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_SalesChannel",
									"type": "String"
								},
								"DWTable": {
									"value": "SalesChannel",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_SalesChannel_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_SalesChannel",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_SalesChannel",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Subscription_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_Subscription",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_Subscription",
									"type": "String"
								},
								"DWTable": {
									"value": "Subscription",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Subscription_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_Subscription",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_Subscription",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Technology_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_Technology",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_Technology",
									"type": "String"
								},
								"DWTable": {
									"value": "Technology",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Technology_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_Technology",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_Technology",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_ThirdPartyStore_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_ThirdPartyStore",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_ThirdPartyStore",
									"type": "String"
								},
								"DWTable": {
									"value": "ThirdPartyStore",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_ThirdPartyStore_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_ThirdPartyStore",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_ThirdPartyStore",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Ticket_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_Ticket",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_Ticket",
									"type": "String"
								},
								"DWTable": {
									"value": "Ticket",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_Ticket_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_Ticket",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_Ticket",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_TransactionState_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_Dim_TransactionState",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadDimension]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Dim_TransactionState",
									"type": "String"
								},
								"DWTable": {
									"value": "TransactionState",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DIM_1_TransactionState_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Dim_TransactionState",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Dim_TransactionState",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.3_Dimensions"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_0_Cubus31_PCTI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "BUI_915_Customers_CU",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_Cubus31_PCTI_BUI_915_Customers_CU",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EXT_1_Cubus31_PCTI_BUI_915_Customers_CU')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_0_Cubus_MasterData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DimEmployee",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_Cubus_MasterData_DimEmployee",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EXT_1_Cubus_MasterData_DimEmployee')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_0_NuuDL_BIZ')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dimdimproduct",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_BIZ_dimdimproduct",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pdindividge",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_BIZ_pdindividge",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_BIZ_dimdimproduct')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_BIZ_pdindividge')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_0_NuuDL_Columbus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AFTALE_LID",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Columbus_AFTALE_LID",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "PROD_LID_AFT",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Columbus_PROD_LID_AFT",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Columbus_AFTALE_LID')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Columbus_PROD_LID_AFT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_0_NuuDL_Dawn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "cimcontactmedium",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_cimcontactmedium",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "cimcontactmediumassociation",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_cimcontactmediumassociation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "cimcustomer",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_cimcustomer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "cimindividual",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_cimindividual",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "cimpartyrole",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_cimpartyrole",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "cimpartyroleassociation",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_cimpartyroleassociation",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "cpmnrmltroubleticket",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_cpmnrmltroubleticket",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "cpmnrmltroubleticketrelatedentityref",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_cpmnrmltroubleticketrelatedentityref",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ibsitemshistory",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_ibsitemshistory",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ibsitemshistorycharacteristics",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_ibsitemshistorycharacteristics",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ibsnrmlcharacteristic",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_ibsnrmlcharacteristic",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ibsnrmlproductinstance",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_ibsnrmlproductinstance",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "nrmaccountkeyname",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_nrmaccountkeyname",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "nrmcusthasproductkeyname",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_nrmcusthasproductkeyname",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "nrmcustproductdetails",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_nrmcustproductdetails",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "orgchrteammember",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_orgchrteammember",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "phonenumbers",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_phonenumbers",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "qssnrmlquote",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_qssnrmlquote",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "qssnrmlquoteitem",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_qssnrmlquoteitem",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "qssnrmlquoteitemprice",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_qssnrmlquoteitemprice",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "qssnrmlquoteitempricealteration",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_qssnrmlquoteitempricealteration",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "worklogitems",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Dawn_worklogitems",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_cimcontactmedium')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_cimcontactmediumassociation')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_cimcustomer')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_cimindividual')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_cimpartyrole')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_cimpartyroleassociation')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_cpmnrmltroubleticket')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_cpmnrmltroubleticketrelatedentityref')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_ibsitemshistory')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_ibsitemshistorycharacteristics')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_ibsnrmlcharacteristic')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_ibsnrmlproductinstance')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_nrmaccountkeyname')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_nrmcusthasproductkeyname')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_nrmcustproductdetails')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_orgchrteammember')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_phonenumbers')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_qssnrmlquote')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_qssnrmlquoteitem')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_qssnrmlquoteitemprice')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_qssnrmlquoteitempricealteration')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Dawn_worklogitems')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_0_NuuDL_Linkit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LINK_KUNDE",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_Linkit_LINK_KUNDE",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_Linkit_LINK_KUNDE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_0_NuuDL_NAM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "nam",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuDL_NAM_nam",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuDL_NAM_nam')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_0_NuuData_Chipper')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ChipperTicketsComments",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuData_Chipper_ChipperTicketsComments",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ChipperTicketsEventLog",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuData_Chipper_ChipperTicketsEventLog",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ChipperTicketsTags",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuData_Chipper_ChipperTicketsTags",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ChipperTicketsTickets",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_NuuData_Chipper_ChipperTicketsTickets",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuData_Chipper_ChipperTicketsComments')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuData_Chipper_ChipperTicketsEventLog')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuData_Chipper_ChipperTicketsTags')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_NuuData_Chipper_ChipperTicketsTickets')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_0_Nuudl_NetCracker')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "pimnrmlcustomercategory",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_Nuudl_NetCracker_pimnrmlcustomercategory",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pimnrmldistributionchannel",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_Nuudl_NetCracker_pimnrmldistributionchannel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pimnrmlprodcatprodoffering",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_Nuudl_NetCracker_pimnrmlprodcatprodoffering",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pimnrmlprodofferingpricespecification",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_Nuudl_NetCracker_pimnrmlprodofferingpricespecification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pimnrmlproductcatalog",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_Nuudl_NetCracker_pimnrmlproductcatalog",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pimnrmlproductfamily",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_Nuudl_NetCracker_pimnrmlproductfamily",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pimnrmlproductoffering",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_Nuudl_NetCracker_pimnrmlproductoffering",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pimnrmlproductofferingpricechargeitem",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_Nuudl_NetCracker_pimnrmlproductofferingpricechargeitem",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pimnrmlproductofferingpricechargekey",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_Nuudl_NetCracker_pimnrmlproductofferingpricechargekey",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "pimnrmlpromotionprodofferingpricealteration",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_1_Nuudl_NetCracker_pimnrmlpromotionprodofferingpricealteration",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"WriteBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/EXT_1_Nuudl_NetCracker_pimnrmlcustomercategory')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_Nuudl_NetCracker_pimnrmldistributionchannel')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_Nuudl_NetCracker_pimnrmlprodcatprodoffering')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_Nuudl_NetCracker_pimnrmlprodofferingpricespecification')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_Nuudl_NetCracker_pimnrmlproductcatalog')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_Nuudl_NetCracker_pimnrmlproductfamily')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_Nuudl_NetCracker_pimnrmlproductoffering')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_Nuudl_NetCracker_pimnrmlproductofferingpricechargeitem')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_Nuudl_NetCracker_pimnrmlproductofferingpricechargekey')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_1_Nuudl_NetCracker_pimnrmlpromotionprodofferingpricealteration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_Cubus31_PCTI_BUI_915_Customers_CU')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_IsReady_flag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT 1 AS IsReady",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Cubus31_PCTI_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "CUBUS_READER.BUI_915_Customers_CU"
								}
							}
						}
					},
					{
						"name": "Evaluate_IsReady_flag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup_IsReady_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup_IsReady_flag').output.firstRow.IsReady,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "IsReady",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "The source was not ready at execution time. Try re-running the pipeline at a later time.",
										"errorCode": "0"
									}
								}
							]
						}
					},
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Evaluate_IsReady_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Cubus31_PCTI",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "SqlServer",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "CUBUS_READER",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "BUI_915_Customers_CU",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceCubus31PCTI",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy_BUI_915_Customers_CU",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "\r\nSELECT \r\n[LinkKundeID] \r\n,[CustomerNumber] \r\n,[AccountNumber] \r\n,[HouseholdID] \r\n,[Lid] \r\n,[Segment] \r\n,[PersonId] \r\n,[SystemKtnavn] \r\n,[ServiceProvCode] \r\n,[Product] \r\n,[Technology] \r\n,[CVRnr] \r\n,[OKunde] \r\n,[Objecttime] \r\n,[Kvhx] \r\n \r\nFROM CUBUS_READER.[BUI_915_Customers_CU]\r\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceCubus31PCTI].[BUI_915_Customers_CU]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "Cubus31_PCTI_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "CUBUS_READER.BUI_915_Customers_CU"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceCubus31PCTI].[BUI_915_Customers_CU]"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Cubus31_PCTI_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_Cubus_MasterData_DimEmployee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_IsReady_flag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT 1 AS IsReady",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Cubus_MasterData_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Dimension.DimEmployee"
								}
							}
						}
					},
					{
						"name": "Evaluate_IsReady_flag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup_IsReady_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup_IsReady_flag').output.firstRow.IsReady,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "IsReady",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "The source was not ready at execution time. Try re-running the pipeline at a later time.",
										"errorCode": "0"
									}
								}
							]
						}
					},
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Evaluate_IsReady_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Cubus_MasterData",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "SqlServer",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "Dimension",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "DimEmployee",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceCubusMasterData",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy_DimEmployee",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "\r\nSELECT \r\n[EmployeeKey] \r\n,[DW_ID_DimEmployeeWork] AS [SRC_DW_ID_DimEmployeeWork]\r\n,[DW_AuditKey] AS [SRC_DW_AuditKey]\r\n,[DW_Batch_Created_ID] AS [SRC_DW_Batch_Created_ID]\r\n,[DW_Batch_Updated_ID] AS [SRC_DW_Batch_Updated_ID]\r\n,[DW_CreateDate] AS [SRC_DW_CreateDate]\r\n,[DW_UpdateDate] AS [SRC_DW_UpdateDate]\r\n,[DW_Valid_From] AS [SRC_DW_Valid_From]\r\n,[DW_Valid_To] AS [SRC_DW_Valid_To]\r\n,[DW_EarlyArrived] AS [SRC_DW_EarlyArrived]\r\n,[DW_IsCurrent] AS [SRC_DW_IsCurrent]\r\n,[DW_IsDeleted] AS [SRC_DW_IsDeleted]\r\n,[DW_CRC] AS [SRC_DW_CRC]\r\n,[Source_Updated_TS] \r\n,[Source_Created_TS] \r\n,[Source_Updated_By] \r\n,[Source_Created_By] \r\n,[EmployeeID] \r\n,[EmployeeRecord] \r\n,[SourceSystem] \r\n,[JobIndicator] \r\n,[EmployeeStatus] \r\n,[Sex] \r\n,[BirthDate] \r\n,[FirstName] \r\n,[LastName] \r\n,[Name] \r\n,[LocalPhone] \r\n,[MobilePhone] \r\n,[FAX] \r\n,[WorkplacePhone] \r\n,[AlternativePhone] \r\n,[RoomNumber] \r\n,[PostalRoomNumber] \r\n,[Email] \r\n,[UserID] \r\n,[SeniorityDate] \r\n,[AnniversaryDate] \r\n,[StandardHours] \r\n,[OriginalHireDate] \r\n,[LatestHireDate] \r\n,[TerminationDate] \r\n,[LocationID] \r\n,[WorkAddress] \r\n,[WorkZipCode] \r\n,[WorkPostalDistrict] \r\n,[BusinessTitleCode] \r\n,[BusinessTitle] \r\n,[BusinessTitleShort] \r\n,[BusinessStatisticsCode] \r\n,[BusinessFunction] \r\n,[JobStatus] \r\n,[JobCode] \r\n,[JobCodeDescription] \r\n,[EmployeeClass] \r\n,[SalaryAdminPlan] \r\n,[SalaryGrade] \r\n,[PayGroup] \r\n,[SalaryType] \r\n,[EmployeeType] \r\n,[DepartmentID] \r\n,[DepartmentDescription] \r\n,[DepartmentDescriptionShort] \r\n,[ManagerEmployeeID] \r\n,[AONR] \r\n,[Company] \r\n,[CompanyDescription] \r\n,[CompanyDescriptionShort] \r\n,[EmployeeTypeCode] \r\n,[TerminationInfo] \r\n,[EmployeeStatusDescription] \r\n,[SexDescription] \r\n,[SkillGroup] \r\n,[IsManager] \r\n,[SquadID] \r\n,[SquadDescription] \r\n,[SquadDescriptionShort] \r\n,[IsAgileCoach] \r\n,[IsProductOwner] \r\n,[ApprovedEmailDomain] \r\n,[ChapterAreaID] \r\n,[ChapterAreaDescription] \r\n,[ChapterAreaDescriptionShort] \r\n \r\nFROM Dimension.[DimEmployee]\r\n",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceCubusMasterData].[DimEmployee]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "Cubus_MasterData_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "Dimension.DimEmployee"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceCubusMasterData].[DimEmployee]"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Cubus_MasterData_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_BIZ_dimproduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_BIZ",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "biz",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "dimproduct",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlBIZ",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_BIZ"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "biz"
									},
									"SourceTableName": {
										"type": "String",
										"value": "dimproduct"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_BIZ"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "biz"
									},
									"SourceTableName": {
										"type": "String",
										"value": "dimproduct"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_dimproduct",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`NUUDL_SourceCreated` \r\n,`NUUDL_SourceUpdated` \r\n,`ProductKey` \r\n,`DimEditor_Updated_TS` \r\n,`DimEditor_Created_TS` \r\n,`DimEditor_Created_By` \r\n,`ProductID` \r\n,`SourceSystem` \r\n,`Downstream` \r\n,`ETL_AntalLinier` \r\n,`ETL_FlowRelevant` \r\n,`ETL_ProduktInfo` \r\n,`ETL_ProduktKobling` \r\n,`ETL_TekstRelevant` \r\n,`IsWholesale` \r\n,`ProductBrandCategory` \r\n,`ProductCategory` \r\n,`ProductChange` \r\n,`ProductChangeCategory` \r\n,`ProductMainCategory` \r\n,`ProductName` \r\n,`ProductNetworkTechnology` \r\n,`ProductSubCategory` \r\n,`ProductTargetCustomer` \r\n,`ProductTransmissionTechnology` \r\n,`ProductType` \r\n,`SalesEffectiveDate` \r\n,`SalesExperiationDate` \r\n,`ServiceType` \r\n,`SourceCreatedDate` \r\n,`SourceEffectiveDate` \r\n,`SourceExpirationDate` \r\n,`SourceUpdatedBy` \r\n,`SourceUpdatedDate` \r\n,`Upstream` \r\n,`NUUDL_ID` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`BIZ_BatchCreatedID` \r\n,`BIZ_BatchUpdatedID` \r\n,`NUUDL_PKLatest` \r\n,`SAF_Attr` \r\n,`ETL_SAFFlowrelevant` \r\n,`ETL_SAFFlowrelevantDate` \r\n,`Niv1` \r\n,`Niv2` \r\n,`Niv3` \r\n,`Niv4` \r\n,`ProductSubCategory2` \r\n,`BellisPrioritet` \r\n,`Bemaerkning` \r\n,`CallDirectionFrom` \r\n,`CallDirectionTo` \r\n,`Landekode` \r\n,`Source_Created_By` \r\n,`Source_Updated_By` \r\n,`TrafficAddon` \r\n,`Volumetype` \r\n,`BundleType` \r\n,`Technology` \r\n,`ProductWeight` \r\n,`NUUDL_CuratedBatchID` \r\n \r\nFROM biz.`DimProduct`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlBIZ].[dimproduct]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_BIZ_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "biz.dimproduct"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlBIZ].[dimproduct]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_dimproduct",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlBIZ.dimproduct",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_BIZ",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "biz",
									"type": "String"
								},
								"SourceTableName": {
									"value": "dimproduct",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_BIZ_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_BIZ_dimdimproduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_BIZ",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "dim",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "dimdimproduct",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlBIZ",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_BIZ"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "dim"
									},
									"SourceTableName": {
										"type": "String",
										"value": "dimdimproduct"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_BIZ"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "dim"
									},
									"SourceTableName": {
										"type": "String",
										"value": "dimdimproduct"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_dimdimproduct",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`NUUDL_SourceCreated` \r\n,`NUUDL_SourceUpdated` \r\n,`ProductKey` \r\n,`DimEditor_Updated_TS` \r\n,`DimEditor_Created_TS` \r\n,`DimEditor_Created_By` \r\n,`ProductID` \r\n,`SourceSystem` \r\n,`Downstream` \r\n,`ETL_AntalLinier` \r\n,`ETL_FlowRelevant` \r\n,`ETL_ProduktInfo` \r\n,`ETL_ProduktKobling` \r\n,`ETL_TekstRelevant` \r\n,`IsWholesale` \r\n,`ProductBrandCategory` \r\n,`ProductCategory` \r\n,`ProductChange` \r\n,`ProductChangeCategory` \r\n,`ProductMainCategory` \r\n,`ProductName` \r\n,`ProductNetworkTechnology` \r\n,`ProductSubCategory` \r\n,`ProductTargetCustomer` \r\n,`ProductTransmissionTechnology` \r\n,`ProductType` \r\n,`SalesEffectiveDate` \r\n,`SalesExperiationDate` \r\n,`ServiceType` \r\n,`SourceCreatedDate` \r\n,`SourceEffectiveDate` \r\n,`SourceExpirationDate` \r\n,`SourceUpdatedBy` \r\n,`SourceUpdatedDate` \r\n,`Upstream` \r\n,`NUUDL_ID` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`BIZ_BatchCreatedID` \r\n,`BIZ_BatchUpdatedID` \r\n,`NUUDL_PKLatest` \r\n,`SAF_Attr` \r\n,`ETL_SAFFlowrelevant` \r\n,`ETL_SAFFlowrelevantDate` \r\n,`Niv1` \r\n,`Niv2` \r\n,`Niv3` \r\n,`Niv4` \r\n,`ProductSubCategory2` \r\n,`BellisPrioritet` \r\n,`Bemaerkning` \r\n,`CallDirectionFrom` \r\n,`CallDirectionTo` \r\n,`Landekode` \r\n,`Source_Created_By` \r\n,`Source_Updated_By` \r\n,`TrafficAddon` \r\n,`Volumetype` \r\n,`BundleType` \r\n,`Technology` \r\n,`ProductWeight` \r\n,`NUUDL_BaseSourceFilename` \r\n,`NUUDL_BaseBatchID` \r\n,`NUUDL_BaseProcessedTimestamp` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n \r\nFROM dai.dim.`dimdimproduct`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlBIZ].[dimdimproduct]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_BIZ_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.dim.dimdimproduct"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlBIZ].[dimdimproduct]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_dimdimproduct",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlBIZ.dimdimproduct",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_BIZ",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "dim",
									"type": "String"
								},
								"SourceTableName": {
									"value": "dimdimproduct",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_BIZ_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_BIZ_pdindividge')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_BIZ",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "ref",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "pdindividge",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlBIZ",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_BIZ"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "ref"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pdindividge"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_BIZ"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "ref"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pdindividge"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_pdindividge",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "SELECT \n`NUUDL_SourceCreated` \n,`NUUDL_SourceUpdated` \n--,`FIRMA` \n--,`ENHED` \n--,`VIRKNR` \n,`LOENNR` \n--,`LOEBENR` \n--,`STATUS` \n,`ANUMMER` \n,`EMAIL` \n--,`STEDNR` \n--,`AONR` \n,`KONTORFORK` \n--,`KONTORNAVN` \n--,`FYSADR` \n--,`POSTADR` \n--,`STIL_KODE` \n--,`INITIALER` \n,`NAVN` \n--,`FORNAVN` \n--,`MELLEMNAVN` \n--,`EFTERNAVN` \n--,`ADRESSE` \n--,`ADRLIN_1` \n--,`ADRLIN_2` \n--,`ADRLIN_3` \n--,`POSTNR` \n--,`KOEN` \n--,`ANS_DATO` \n--,`AFG_DATO` \n--,`FOD_DATO` \n--,`START_ORLOV` \n--,`SLUT_ORLOV` \n--,`OMRAADE` \n--,`TLFLOK` \n--,`TLFDIR` \n--,`TLFMOB` \n--,`TLFALT` \n--,`TLFFAX` \n--,`TLFOPS` \n--,`TLFUDL` \n--,`TJEGREN` \n--,`KATEGORI` \n--,`AFLFORM` \n--,`TILHOER` \n--,`ARBSTEDKD` \n--,`AENDRET` \n--,`OPDATERET` \n--,`NORMTID` \n--,`TRGRUPPE` \n--,`BANKREGNR` \n--,`BANKKONTONR` \n--,`FAGGRUPPE` \n,`NUUDL_ID` \n,`NUUDL_ValidFrom` \n,`NUUDL_ValidTo` \n,`NUUDL_IsCurrent` \n--,`BIZ_BatchCreatedID` \n--,`BIZ_BatchUpdatedID` \n,`NUUDL_PKLatest` \n,`NUUDL_BaseSourceFilename` \n,`NUUDL_BaseBatchID` \n,`NUUDL_BaseProcessedTimestamp` \n,`NUUDL_CuratedBatchID` \n,`NUUDL_CuratedProcessedTimestamp` \n \nFROM dai.ref.`pdindividge`\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'\n\tAND NUUDL_ValidTo > '2023-01-01'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlBIZ].[pdindividge]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_BIZ_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.ref.pdindividge"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlBIZ].[pdindividge]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_pdindividge",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlBIZ.pdindividge",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_BIZ",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "ref",
									"type": "String"
								},
								"SourceTableName": {
									"value": "pdindividge",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_BIZ_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Columbus_AFTALE_LID')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Columbus",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "cu",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "AFTALE_LID",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlColumbus",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Columbus"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": ""
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "cu"
									},
									"SourceTableName": {
										"type": "String",
										"value": "AFTALE_LID"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Columbus"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": ""
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "cu"
									},
									"SourceTableName": {
										"type": "String",
										"value": "AFTALE_LID"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_AFTALE_LID",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "SELECT \r\n`NUUDL_SourceCreated` \r\n,`NUUDL_SourceUpdated` \r\n,`ABM_NR` \r\n,`ABONNEMENT_ID` \r\n,`AENDRINGSSTATUS` \r\n,`AFTALE_NR` \r\n,`BEM_TEKST` \r\n,`FAST_SPAERRING` \r\n,`FJERNTELEFON` \r\n,`FORBIND_ID` \r\n,`GEN_DUT` \r\n,`KUNDESAG_KD_AFS` \r\n,`KUNDESAG_KD_OPR` \r\n,`LID` \r\n,`LID_STATUS` \r\n,`MOMSFRI_MRK` \r\n,`NAVNE_NR` \r\n,`NBR_DUT` \r\n,`OP_SOEGEFELT` \r\n,`ORDRE_NR_AFS` \r\n,`ORDRE_NR_OPR` \r\n,`PRIS_SOEJLE` \r\n,`SIDST_OPD_INIT` \r\n,`SIDST_OPD_TSTMP` \r\n,`SLUT_DATO` \r\n,`START_DATO` \r\n,`TLF_BOG_OPT_KD` \r\n,`TRAFIK_OPSM_MRK` \r\n,`UDSTIL_LID_MRK` \r\n,`NUUDL_ID` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`BIZ_BatchCreatedID` \r\n,`BIZ_BatchUpdatedID` \r\n,`NUUDL_PKLatest` \r\n,`NUUDL_CuratedBatchID` \r\n \r\nFROM cu.`AFTALE_LID`\r\n WHERE NUUDL_ValidTo>='2017-01-01' AND NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlColumbus].[AFTALE_LID]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Columbus_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": ".cu.AFTALE_LID"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlColumbus].[AFTALE_LID]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_AFTALE_LID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlColumbus.AFTALE_LID",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Columbus",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "cu",
									"type": "String"
								},
								"SourceTableName": {
									"value": "AFTALE_LID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Columbus_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Columbus_PROD_LID_AFT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Columbus",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "cu",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "PROD_LID_AFT",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlColumbus",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Columbus"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": ""
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "cu"
									},
									"SourceTableName": {
										"type": "String",
										"value": "PROD_LID_AFT"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Columbus"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": ""
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "cu"
									},
									"SourceTableName": {
										"type": "String",
										"value": "PROD_LID_AFT"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_PROD_LID_AFT",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "SELECT \r\n`NUUDL_SourceCreated` \r\n,`NUUDL_SourceUpdated` \r\n,`ABONNEMENT_ID` \r\n,`AENDRINGSSTATUS` \r\n,`AFSAET_KODE` \r\n,`ANTAL_PRODUKT` \r\n,`ARBITRAER_PRIS` \r\n,`B_SLUT_DATO` \r\n,`FUNKTIONS_NR` \r\n,`IDRIFT_MRK` \r\n,`KUNDE_PRIS_AFT_NO` \r\n,`LID_LOEBE_ID` \r\n,`ORDRE_NR_OPR` \r\n,`PROD_LID_AFT_ID` \r\n,`PRODUKT_ELM_NR` \r\n,`PRODUKT_GRP_NR` \r\n,`RABAT_LOEB` \r\n,`RABAT_LOEB_SAT` \r\n,`REGNINGS_BEM` \r\n,`SIDST_OPD_INIT` \r\n,`SIDST_OPD_TSTMP` \r\n,`START_DATO` \r\n,`TEKST_MRK` \r\n,`UNDERLEV_ID` \r\n,`NUUDL_ID` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`BIZ_BatchCreatedID` \r\n,`BIZ_BatchUpdatedID` \r\n,`NUUDL_PKLatest` \r\n,`K_MRK_DATO` \r\n,`NUUDL_CuratedBatchID` \r\n \r\nFROM cu.`PROD_LID_AFT`\r\n WHERE NUUDL_ValidTo>='2017-01-01' AND NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlColumbus].[PROD_LID_AFT]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Columbus_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": ".cu.PROD_LID_AFT"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlColumbus].[PROD_LID_AFT]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_PROD_LID_AFT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlColumbus.PROD_LID_AFT",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Columbus",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "cu",
									"type": "String"
								},
								"SourceTableName": {
									"value": "PROD_LID_AFT",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Columbus_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_cimcontactmedium')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "cimcontactmedium",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cimcontactmedium"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cimcontactmedium"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_cimcontactmedium",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`active_from` \r\n,to_json(`billing_data`) `billing_data` \r\n,to_json(`changed_by`) `changed_by` \r\n,`city` \r\n,to_json(`contact_hour`) `contact_hour` \r\n,`country` \r\n,`email_address` \r\n,`end_date_time` \r\n,to_json(`extended_attributes`) `extended_attributes` \r\n,`fax_number` \r\n,`id` \r\n,`is_active` \r\n,`phone_ext_number` \r\n,`phone_number` \r\n,`postcode` \r\n,`preferred_contact` \r\n,`preferred_notification` \r\n,`push_notification_group_key` \r\n,`ref_id` \r\n,`ref_type` \r\n,`social_network_id` \r\n,`start_date_time` \r\n,`state_or_province` \r\n,`street1` \r\n,`street2` \r\n,`type_of_contact` \r\n,`type_of_contact_method` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,CAST(extended_attributes:floor AS STRING) AS `extended_attributes_floor` \r\n,CAST(extended_attributes:suite AS STRING) AS `extended_attributes_suite` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_IsLatest` \r\n,`NUUDL_ID` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`cimcontactmedium`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[cimcontactmedium]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.cimcontactmedium"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[cimcontactmedium]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_cimcontactmedium",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.cimcontactmedium",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "cimcontactmedium",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_cimcontactmediumassociation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "cimcontactmediumassociation",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cimcontactmediumassociation"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cimcontactmediumassociation"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_cimcontactmediumassociation",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`active_from` \r\n,to_json(`changed_by`) `changed_by` \r\n,`contact_medium_id` \r\n,`id` \r\n,`ref_id` \r\n,`ref_type` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`cimcontactmediumassociation`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[cimcontactmediumassociation]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.cimcontactmediumassociation"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[cimcontactmediumassociation]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_cimcontactmediumassociation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.cimcontactmediumassociation",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "cimcontactmediumassociation",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_cimcustomer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "cimcustomer",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cimcustomer"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cimcustomer"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_cimcustomer",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`active_from` \r\n,to_json(`billing_data`) `billing_data` \r\n,`billing_synchronization_status` \r\n,`brand_id` \r\n,to_json(`changed_by`) `changed_by` \r\n,`customer_category_id` \r\n,`customer_number` \r\n,`customer_since` \r\n,`end_date_time` \r\n,`engaged_party_description` \r\n,`engaged_party_id` \r\n,`engaged_party_name` \r\n,`engaged_party_ref_type` \r\n,to_json(`extended_attributes`) `extended_attributes` \r\n,`external_id` \r\n,`id` \r\n,`idempotency_key` \r\n,`last_nps_survey_ref` \r\n,`name` \r\n,`net_promoter_score` \r\n,to_json(`ola_ref`) `ola_ref` \r\n,to_json(`org_chart_ref`) `org_chart_ref` \r\n,`portfolio` \r\n,`start_date_time` \r\n,`status` \r\n,`status_reason` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,CAST(extended_attributes:brandName AS STRING) AS `extended_attributes_brandName` \r\n,CAST(extended_attributes:employeeBrand AS STRING) AS `extended_attributes_employeeBrand` \r\n,CAST(extended_attributes:employeeId AS STRING) AS `extended_attributes_employeeId` \r\n,CAST(extended_attributes:migration_date AS STRING) AS `extended_attributes_migration_date` \r\n,CAST(extended_attributes:migration_phase AS STRING) AS `extended_attributes_migration_phase` \r\n,CAST(extended_attributes:migration_source AS STRING) AS `extended_attributes_migration_source` \r\n,CAST(extended_attributes:migrationFlag AS STRING) AS `extended_attributes_migrationFlag` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`cimcustomer`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[cimcustomer]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.cimcustomer"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[cimcustomer]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_cimcustomer",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.cimcustomer",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "cimcustomer",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_cimindividual')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "cimindividual",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cimindividual"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cimindividual"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_cimindividual",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`active_from` \r\n,to_json(`billing_data`) `billing_data` \r\n,`birthdate` \r\n,to_json(`changed_by`) `changed_by` \r\n,`country_of_birth` \r\n,`death_date` \r\n,to_json(`extended_attributes`) `extended_attributes` \r\n,`gender` \r\n,`id` \r\n,`idempotency_key` \r\n,`location` \r\n,`marital_status` \r\n,`nationality` \r\n,`place_of_birth` \r\n,`status` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`cimindividual`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[cimindividual]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.cimindividual"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[cimindividual]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_cimindividual",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.cimindividual",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "cimindividual",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_cimpartyrole')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "cimpartyrole",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cimpartyrole"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cimpartyrole"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_cimpartyrole",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`active_from` \r\n,`billing_synchronization_status` \r\n,to_json(`changed_by`) `changed_by` \r\n,`end_date_time` \r\n,`engaged_party_description` \r\n,`engaged_party_id` \r\n,`engaged_party_name` \r\n,`engaged_party_ref_type` \r\n,to_json(`extended_attributes`) `extended_attributes` \r\n,`id` \r\n,`idempotency_key` \r\n,`name` \r\n,to_json(`ola_ref`) `ola_ref` \r\n,`party_role_type` \r\n,`start_date_time` \r\n,`status` \r\n,`status_reason` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_IsLatest` \r\n,`NUUDL_ID` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`cimpartyrole`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[cimpartyrole]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.cimpartyrole"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[cimpartyrole]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_cimpartyrole",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.cimpartyrole",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "cimpartyrole",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_cimpartyroleassociation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "cimpartyroleassociation",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cimpartyroleassociation"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cimpartyroleassociation"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_cimpartyroleassociation",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`active_from` \r\n,`association_name` \r\n,`association_role` \r\n,to_json(`changed_by`) `changed_by` \r\n,`id` \r\n,`id_from` \r\n,`id_to` \r\n,`ref_type_from` \r\n,`ref_type_to` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`cimpartyroleassociation`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[cimpartyroleassociation]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.cimpartyroleassociation"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[cimpartyroleassociation]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_cimpartyroleassociation",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.cimpartyroleassociation",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "cimpartyroleassociation",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_cpmnrmltroubleticket')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "cpmnrmltroubleticket",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cpmnrmltroubleticket"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cpmnrmltroubleticket"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_cpmnrmltroubleticket",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`approval_reason` \r\n,`channel_id` \r\n,`closed_by_date` \r\n,`closed_by_user_id` \r\n,`closed_by_user_name` \r\n,`closure_code` \r\n,`created_by_date` \r\n,`created_by_user_id` \r\n,`created_by_user_name` \r\n,`description` \r\n,to_json(`dispute_item`) `dispute_item` \r\n,`expected_resolution_date` \r\n,to_json(`extended_attributes`) `extended_attributes` \r\n,`external_id` \r\n,`first_resolution_date` \r\n,`group_assignee_id` \r\n,`group_assignee_name` \r\n,`group_assignee_type` \r\n,`id` \r\n,`is_solution_visible_for_contact` \r\n,`last_approved_by_date` \r\n,`last_approved_by_user_id` \r\n,`last_approved_by_user_name` \r\n,`last_updated_by_date` \r\n,`last_updated_by_user_id` \r\n,`last_updated_by_user_name` \r\n,`name` \r\n,`priority` \r\n,`problem_start_date` \r\n,`project_id` \r\n,`project_name` \r\n,`reporter_id` \r\n,`reporter_name` \r\n,`reporter_type` \r\n,`requested_resolution_date` \r\n,`resolution_reason` \r\n,`resolved_by_date` \r\n,`resolved_by_user_id` \r\n,`resolved_by_user_name` \r\n,`severity` \r\n,`solution` \r\n,`status` \r\n,`status_change_date` \r\n,`status_change_reason` \r\n,to_json(`tags`) `tags` \r\n,`ticket_category` \r\n,`ticket_type` \r\n,`total_disputed_amount` \r\n,`total_initial_amount` \r\n,`user_assignee_id` \r\n,`user_assignee_name` \r\n,`user_assignee_type` \r\n,`version` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`cpmnrmltroubleticket`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[cpmnrmltroubleticket]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.cpmnrmltroubleticket"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[cpmnrmltroubleticket]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_cpmnrmltroubleticket",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.cpmnrmltroubleticket",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "cpmnrmltroubleticket",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_cpmnrmltroubleticketrelatedentityref')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "cpmnrmltroubleticketrelatedentityref",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cpmnrmltroubleticketrelatedentityref"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "cpmnrmltroubleticketrelatedentityref"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_cpmnrmltroubleticketrelatedentityref",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`id` \r\n,`name` \r\n,`role` \r\n,`trouble_ticket_id` \r\n,`type` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`cpmnrmltroubleticketrelatedentityref`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[cpmnrmltroubleticketrelatedentityref]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.cpmnrmltroubleticketrelatedentityref"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[cpmnrmltroubleticketrelatedentityref]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_cpmnrmltroubleticketrelatedentityref",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.cpmnrmltroubleticketrelatedentityref",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "cpmnrmltroubleticketrelatedentityref",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_ibsitemshistory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "ibsitemshistory",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "ibsitemshistory"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "ibsitemshistory"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_ibsitemshistory",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\nSELECT \n`active_from` \n,`active_to` \n,`id` \n,`idempotency_key` \n,`is_snapshot` \n,to_json(`item`) `item` \n,`last_modified_ts` \n,`schema_version` \n,`is_deleted` \n,`state` \n,`is_current` \n,`version` \n,`ts_ms` \n,`lsn` \n,`op` \n,CAST(item:accountRef AS STRING) AS `item_accountRef` \n,CAST(item:businessGroup.id AS STRING) AS `item_businessGroup_id` \n,CAST(item:customerId AS STRING) AS `item_customerId` \n,CAST(item:distributionChannelId AS STRING) AS `item_distributionChannelId` \n,CAST(item:expirationDate AS STRING) AS `item_expirationDate` \n,CAST(item:extendedAttributes AS STRING) AS `item_extendedAttributes` \n,CAST(item:name AS STRING) AS `item_name` \n,CAST(item:offeringId AS STRING) AS `item_offeringId` \n,CAST(item:offeringName AS STRING) AS `item_offeringName` \n,CAST(item:parentId AS STRING) AS `item_parentId` \n--,CAST(item:prices AS STRING) AS `item_prices` \n,CAST(item:productFamilyId AS STRING) AS `item_productFamilyId` \n,CAST(item:productFamilyName AS STRING) AS `item_productFamilyName` \n,CAST(item:productRelationship[0].productId AS STRING) AS `item_productRelationship_productId` \n,CAST(item:productRelationship[0].relationshipType AS STRING) AS `item_productRelationship_relationshipType` \n,CAST(item:productSpecificationRef AS STRING) AS `item_productSpecificationRef` \n,CAST(item:quantity AS STRING) AS `item_quantity` \n,CAST(item:quoteId AS STRING) AS `item_quoteId` \n,CAST(item:relatedPartyRef AS STRING) AS `item_relatedPartyRef` \n,CAST(item:rootId AS STRING) AS `item_rootId` \n,CAST(item:type AS STRING) AS `item_type` \n,CAST(item:version AS STRING) AS `item_version` \n,`NUUDL_IsCurrent` \n,`NUUDL_ValidFrom` \n,`NUUDL_ValidTo` \n,`NUUDL_CuratedBatchID` \n,`NUUDL_CuratedProcessedTimestamp` \n,`NUUDL_IsDeleted` \n,`NUUDL_DeleteType` \n,`NUUDL_ID` \n,`NUUDL_IsLatest` \n \nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`ibsitemshistory`\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[ibsitemshistory]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.ibsitemshistory"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[ibsitemshistory]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_ibsitemshistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.ibsitemshistory",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "ibsitemshistory",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_ibsitemshistorycharacteristics')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "ibsitemshistorycharacteristics",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "ibsitemshistorycharacteristics"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "ibsitemshistorycharacteristics"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_ibsitemshistorycharacteristics",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "SELECT \r\n    id,\r\n    MAX(CASE WHEN exploded.characteristics.name = 'Technology' THEN exploded.characteristics.value[0] END) AS technology,\r\n    MAX(CASE WHEN exploded.characteristics.name = 'International Phone Number' THEN exploded.characteristics.value[0] END) AS international_phone_number,\r\n    NUUDL_CuratedBatchID,\r\n    NUUDL_IsCurrent,\r\n    NUUDL_ValidFrom,\r\n    NUUDL_ValidTo,\r\n    NUUDL_ID,\r\n\tNUUDL_IsDeleted,\r\n\tNUUDL_DeleteType,\r\n\tNUUDL_IsLatest\r\nFROM (\r\n  SELECT \r\n    id, \r\n    explode(from_json(CAST(item AS STRING), 'struct<characteristics:array<struct<name:string,value:array<string>>>>').characteristics) AS characteristics,\r\n    NUUDL_CuratedBatchID,\r\n    NUUDL_IsCurrent,\r\n    NUUDL_ValidFrom,\r\n    NUUDL_ValidTo,\r\n    NUUDL_ID,\r\n\tNUUDL_IsDeleted,\r\n\tNUUDL_DeleteType,\r\n\tNUUDL_IsLatest\r\n  FROM dai.netcracker12.ibsitemshistory\r\n) AS exploded\r\nWHERE exploded.characteristics.name IN ('Technology','International Phone Number')\r\nGROUP BY \r\n    id,    \r\n    NUUDL_CuratedBatchID,\r\n    NUUDL_IsCurrent,\r\n    NUUDL_ValidFrom,\r\n    NUUDL_ValidTo,\r\n    NUUDL_ID,\r\n\tNUUDL_IsDeleted,\r\n\tNUUDL_DeleteType,\r\n\tNUUDL_IsLatest\r\n",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[ibsitemshistorycharacteristics]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.ibsitemshistorycharacteristics"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[ibsitemshistorycharacteristics]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_ibsitemshistorycharacteristics",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.ibsitemshistorycharacteristics",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "ibsitemshistorycharacteristics",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_ibsnrmlcharacteristic')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "ibsnrmlcharacteristic",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "ibsnrmlcharacteristic"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "ibsnrmlcharacteristic"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_ibsnrmlcharacteristic",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`attribute_id` \r\n,`name` \r\n,`product_instance_id` \r\n,`product_offering_char_id` \r\n,`product_spec_char_id` \r\n,to_json(`value`) `value` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`ibsnrmlcharacteristic`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[ibsnrmlcharacteristic]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.ibsnrmlcharacteristic"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[ibsnrmlcharacteristic]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_ibsnrmlcharacteristic",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.ibsnrmlcharacteristic",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "ibsnrmlcharacteristic",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_ibsnrmlproductinstance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "ibsnrmlproductinstance",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "ibsnrmlproductinstance"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "ibsnrmlproductinstance"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_ibsnrmlproductinstance",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`account_ref_id` \r\n,`business_group` \r\n,`contracted_date` \r\n,`customer_id` \r\n,`description` \r\n,`disconnection_reason` \r\n,`disconnection_reason_description` \r\n,`effective_date` \r\n,`eligibility_param_id` \r\n,`expiration_date` \r\n,to_json(`extended_attributes`) `extended_attributes` \r\n,`extended_eligibility` \r\n,`external_id` \r\n,`id` \r\n,`idempotency_key` \r\n,`last_modified` \r\n,`name` \r\n,`number_of_installments` \r\n,`offering_id` \r\n,`override_mode` \r\n,`parent_id` \r\n,`place_ref_id` \r\n,`product_order_id` \r\n,`product_specification_id` \r\n,`product_specification_version` \r\n,`quantity` \r\n,`quote_id` \r\n,`root_id` \r\n,`source_quote_item_id` \r\n,`start_date` \r\n,`state` \r\n,`suspended` \r\n,`termination_date` \r\n,`type` \r\n,`version` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`ibsnrmlproductinstance`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[ibsnrmlproductinstance]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.ibsnrmlproductinstance"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[ibsnrmlproductinstance]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_ibsnrmlproductinstance",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.ibsnrmlproductinstance",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "ibsnrmlproductinstance",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_nrmaccountkeyname')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "nrmaccountkeyname",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "nrmaccountkeyname"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "nrmaccountkeyname"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_nrmaccountkeyname",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`account_num` \r\n,`name` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`nrmaccountkeyname`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[nrmaccountkeyname]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.nrmaccountkeyname"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[nrmaccountkeyname]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_nrmaccountkeyname",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.nrmaccountkeyname",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "nrmaccountkeyname",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_nrmcusthasproductkeyname')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "nrmcusthasproductkeyname",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "nrmcusthasproductkeyname"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "nrmcusthasproductkeyname"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_nrmcusthasproductkeyname",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`customer_ref` \r\n,`name` \r\n,`product_seq` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`nrmcusthasproductkeyname`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[nrmcusthasproductkeyname]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.nrmcusthasproductkeyname"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[nrmcusthasproductkeyname]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_nrmcusthasproductkeyname",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.nrmcusthasproductkeyname",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "nrmcusthasproductkeyname",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_nrmcustproductdetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "nrmcustproductdetails",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "nrmcustproductdetails"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "nrmcustproductdetails"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_nrmcustproductdetails",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`account_num` \r\n,`budget_centre_seq` \r\n,`budget_payment_plan_id` \r\n,`community_group_id` \r\n,`community_group_owner_boo` \r\n,`contract_seq` \r\n,`cps_id` \r\n,`cust_product_contact_seq` \r\n,`customer_ref` \r\n,`default_event_source` \r\n,`domain_id` \r\n,`end_dat` \r\n,`override_product_name` \r\n,`product_label` \r\n,`product_seq` \r\n,`start_dat` \r\n,`tax_exempt_ref` \r\n,`tax_exempt_txt` \r\n,`tax_inclusive_boo` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`nrmcustproductdetails`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[nrmcustproductdetails]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.nrmcustproductdetails"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[nrmcustproductdetails]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_nrmcustproductdetails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.nrmcustproductdetails",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "nrmcustproductdetails",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_orgchrteammember')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "orgchrteammember",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "orgchrteammember"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "orgchrteammember"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_orgchrteammember",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\nto_json(`contact_medium`) `contact_medium` \r\n,to_json(`distribution_channel`) `distribution_channel` \r\n,`end_date` \r\n,to_json(`extended_parameters`) `extended_parameters` \r\n,`external_id` \r\n,`first_name` \r\n,`geographic_site` \r\n,`id` \r\n,`idm_roles` \r\n,`idm_user_id` \r\n,`last_name` \r\n,`name` \r\n,`position` \r\n,`skill` \r\n,`start_date` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`orgchrteammember`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[orgchrteammember]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.orgchrteammember"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[orgchrteammember]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_orgchrteammember",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.orgchrteammember",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "orgchrteammember",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_phonenumbers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "phonenumbers",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "phonenumbers"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "phonenumbers"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_phonenumbers",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`aging_period_end_date` \r\n,`area_code` \r\n,`category` \r\n,`country_code` \r\n,`customer_account_id` \r\n,`description` \r\n,to_json(`extended_parameters`) `extended_parameters` \r\n,`first_owner_id` \r\n,`national_prefix` \r\n,`perform_auto_categorization` \r\n,`phone_number` \r\n,`ported_in` \r\n,`ported_in_from` \r\n,`ported_out` \r\n,`ported_out_to` \r\n,`serving_switch_id` \r\n,`status` \r\n,`status_change_date` \r\n,`subrange_id` \r\n,`top_range_id` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`phonenumbers`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[phonenumbers]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.phonenumbers"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[phonenumbers]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_phonenumbers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.phonenumbers",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "phonenumbers",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_qssnrmlquote')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "qssnrmlquote",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "qssnrmlquote"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "qssnrmlquote"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_qssnrmlquote",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\nSELECT \n`approval_level` \n,`assign_to` \n,`brand_id` \n,`business_action` \n,`cancellation_reason` \n--,`customer_category_id` \n,`customer_committed_date` \n,`customer_id` \n,`customer_requested_date` \n,`delivery_method` \n,`distribution_channel_id` \n,`expiration_date` \n,to_json(`extended_parameters`) `extended_parameters` \n,`external_id` \n,`id` \n,`initial_distribution_channel_id` \n,`name` \n,`new_msa` \n,`number` \n,`opportunity_id` \n,`override_mode` \n,`owner` \n,`price_list_id` \n,`quote_creation_date` \n,`revision` \n,`state` \n,`updated_when` \n,`version` \n,`state_change_reason` \n,`ts_ms` \n,`lsn` \n,`op` \n,`NUUDL_IsCurrent` \n,`NUUDL_ValidFrom` \n,`NUUDL_ValidTo` \n,`NUUDL_CuratedBatchID` \n,`NUUDL_CuratedProcessedTimestamp` \n,`NUUDL_IsDeleted` \n,`NUUDL_DeleteType` \n,`NUUDL_IsLatest` \n,`NUUDL_ID` \n \nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`qssnrmlquote`\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[qssnrmlquote]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.qssnrmlquote"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[qssnrmlquote]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_qssnrmlquote",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.qssnrmlquote",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "qssnrmlquote",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_qssnrmlquoteitem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "qssnrmlquoteitem",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "qssnrmlquoteitem"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "qssnrmlquoteitem"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_qssnrmlquoteitem",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\nSELECT \n`account_id` \n,`action` \n,`active_from` \n,`active_to` \n,`amount` \n,`approval_level` \n,`availability_check_result` \n,`business_action` \n,`business_group_id` \n,`business_group_name` \n,`contracted_date` \n,`creation_time` \n,`disconnection_reason` \n,`distribution_channel_id` \n,to_json(`extended_parameters`) `extended_parameters` \n,`geo_site_id` \n,`id` \n--,`market_id` \n,`marketing_bundle_id` \n,`number_of_installments` \n,`parent_quote_item_id` \n,`planned_disconnection_date` \n,`product_instance_id` \n,`product_offering_id` \n,`product_specification_id` \n,`product_specification_version` \n,`quantity` \n,`quote_id` \n,`quote_version` \n,`root_quote_item_id` \n,`state` \n,`delivery_item_id` \n,`ts_ms` \n,`lsn` \n,`op` \n,`NUUDL_IsCurrent` \n,`NUUDL_ValidFrom` \n,`NUUDL_ValidTo` \n,`NUUDL_CuratedBatchID` \n,`NUUDL_CuratedProcessedTimestamp` \n,`NUUDL_IsDeleted` \n,`NUUDL_DeleteType` \n,`NUUDL_IsLatest` \n,`NUUDL_ID` \n \nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`qssnrmlquoteitem`\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[qssnrmlquoteitem]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.qssnrmlquoteitem"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[qssnrmlquoteitem]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_qssnrmlquoteitem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.qssnrmlquoteitem",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "qssnrmlquoteitem",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_qssnrmlquoteitemprice')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "qssnrmlquoteitemprice",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "qssnrmlquoteitemprice"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "qssnrmlquoteitemprice"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_qssnrmlquoteitemprice",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`approx_installment_payment_amount_excluding_tax` \r\n,`approx_installment_payment_amount_including_tax` \r\n,`down_payment_overridden` \r\n,`down_payment_value_excluding_tax` \r\n,`down_payment_value_including_tax` \r\n,to_json(`extended_parameters`) `extended_parameters` \r\n,`overridden` \r\n,`overridden_value` \r\n,`override_type` \r\n,`price_currency` \r\n,`price_id` \r\n,`price_plan_id` \r\n,`price_specification_id` \r\n,`price_type` \r\n,`quote_id` \r\n,`quote_item_id` \r\n,`quote_version` \r\n,`tax_rate` \r\n,`value_base_price_excluding_tax` \r\n,`value_base_price_including_tax` \r\n,`value_excluding_tax` \r\n,`value_including_tax` \r\n,`value_sub_total_price_excluding_tax` \r\n,`value_sub_total_price_including_tax` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`qssnrmlquoteitemprice`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[qssnrmlquoteitemprice]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.qssnrmlquoteitemprice"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[qssnrmlquoteitemprice]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_qssnrmlquoteitemprice",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.qssnrmlquoteitemprice",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "qssnrmlquoteitemprice",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_qssnrmlquoteitempricealteration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "qssnrmlquoteitempricealteration",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "qssnrmlquoteitempricealteration"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "qssnrmlquoteitempricealteration"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_qssnrmlquoteitempricealteration",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`action` \r\n,`application_duration` \r\n,`application_mode` \r\n,`duration_units` \r\n,to_json(`extended_parameters`) `extended_parameters` \r\n,`id` \r\n,`overridden` \r\n,`overridden_value` \r\n,`override_type` \r\n,`price_alteration_type` \r\n,`price_type` \r\n,`promo_action_id` \r\n,`promo_pattern_id` \r\n,`quote_id` \r\n,`quote_item_id` \r\n,`quote_version` \r\n,`valid_from` \r\n,`valid_to` \r\n,`value_excluding_tax` \r\n,`value_including_tax` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`qssnrmlquoteitempricealteration`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[qssnrmlquoteitempricealteration]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.qssnrmlquoteitempricealteration"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[qssnrmlquoteitempricealteration]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_qssnrmlquoteitempricealteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.qssnrmlquoteitempricealteration",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "qssnrmlquoteitempricealteration",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Dawn_worklogitems')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "worklogitems",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "worklogitems"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Dawn"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker12"
									},
									"SourceTableName": {
										"type": "String",
										"value": "worklogitems"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_worklogitems",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\nto_json(`attributes`) `attributes` \r\n,to_json(`changedby`) `changedby` \r\n,`date` \r\n,`description` \r\n,`id` \r\n,`name` \r\n,`ref_id` \r\n,`ref_type` \r\n,`source` \r\n,`source_state` \r\n,`target_state` \r\n,`ts_ms` \r\n,`lsn` \r\n,`op` \r\n,CAST(changedby:userId AS STRING) AS `changedby_userId` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_IsDeleted` \r\n,`NUUDL_DeleteType` \r\n,`NUUDL_ID` \r\n,`NUUDL_IsLatest` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`worklogitems`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlDawn].[worklogitems]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Dawn_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker12.worklogitems"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlDawn].[worklogitems]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_worklogitems",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlDawn.worklogitems",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Dawn",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker12",
									"type": "String"
								},
								"SourceTableName": {
									"value": "worklogitems",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Dawn_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_Linkit_LINK_KUNDE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Linkit",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "linkit",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "LINK_KUNDE",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlLinkit",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Linkit"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": ""
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "linkit"
									},
									"SourceTableName": {
										"type": "String",
										"value": "LINK_KUNDE"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_Linkit"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": ""
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "linkit"
									},
									"SourceTableName": {
										"type": "String",
										"value": "LINK_KUNDE"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_LINK_KUNDE",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`NUUDL_SourceCreated` \r\n,`NUUDL_SourceUpdated` \r\n,`LINK_KUNDE_ID` \r\n,`LINK_KUNDENR` \r\n,`STILLING` \r\n,`FORNAVN` \r\n,`EFTERNAVN` \r\n,`BUSINESS_NAVN1` \r\n,`BUSINESS_NAVN2` \r\n,`KUNDE_KATEGORI` \r\n,`KUNDE_TYPE` \r\n,`CVR_NR` \r\n,`FOEDSELSDATO` \r\n,`CPR_NR` \r\n,`KOEN` \r\n,`SIKKERHEDSKODE` \r\n,`SLUT_MRK` \r\n,`TOTAL_ENGAGEMENT` \r\n,`UDLANDS_CVR_NR` \r\n,`KUNDE_STATUS` \r\n,`POPNAVN` \r\n,`POP_FORNAVN` \r\n,`POP_EFTERNAVN` \r\n,`AENDRINGSSTATUS` \r\n,`SIDST_OPD_TSTMP` \r\n,`SIDST_OPD_INIT` \r\n,`LINK_AARSAG_ID` \r\n,`BONUS_FLAG` \r\n,`NUUDL_ID` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`BIZ_BatchCreatedID` \r\n,`BIZ_BatchUpdatedID` \r\n,`NUUDL_PKLatest` \r\n,`NUUDL_CuratedBatchID` \r\n \r\nFROM linkit.`LINK_KUNDE`\r\n WHERE NUUDL_ValidTo>='2017-01-01' AND NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlLinkit].[LINK_KUNDE]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_Linkit_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": ".linkit.LINK_KUNDE"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlLinkit].[LINK_KUNDE]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_LINK_KUNDE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlLinkit.LINK_KUNDE",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Linkit",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "linkit",
									"type": "String"
								},
								"SourceTableName": {
									"value": "LINK_KUNDE",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_Linkit_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuDL_NAM_nam')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_NAM",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "nam",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "nam",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "SourceNuudlNAM",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_NAM"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "nam"
									},
									"SourceTableName": {
										"type": "String",
										"value": "nam"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuDL_NAM"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "nam"
									},
									"SourceTableName": {
										"type": "String",
										"value": "nam"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_nam",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`sub_address_id` \r\n,`sub_address_floor` \r\n,`sub_address_suite` \r\n,`sub_address_dar_id` \r\n,`sub_address_mad_id` \r\n,`sub_address_kvhx_id` \r\n,`sub_address_official` \r\n,`sub_address_deleted` \r\n,`address_id` \r\n,`address_street_name` \r\n,`address_street_no` \r\n,`address_street_no_suffix` \r\n,`address_postcode` \r\n,`address_city` \r\n,`address_municipality` \r\n,`address_district` \r\n,`address_region` \r\n,`address_street_code` \r\n,`address_region_code` \r\n,`address_dar_id` \r\n,`address_mad_id` \r\n,`address_kvhx_id` \r\n--,`sub_address_kvhx_id_2` \r\n,`address_official` \r\n,`address_deleted` \r\n,`NUUDL_BaseSourceFilename` \r\n,`NUUDL_BaseBatchID` \r\n,`NUUDL_BaseProcessedTimestamp` \r\n,`Snapshot` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n,`NUUDL_CuratedSourceFilename` \r\n \r\nFROM dai.nam.`nam`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'\r\n\tAND sub_address_id IS NOT NULL",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [SourceNuudlNAM].[nam]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "NuuDL_NAM_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.nam.nam"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[SourceNuudlNAM].[nam]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_nam",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "SourceNuudlNAM.nam",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_NAM",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "nam",
									"type": "String"
								},
								"SourceTableName": {
									"value": "nam",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_NAM_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuData_Chipper_ChipperTicketsComments')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_IsReady_flag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT 1 AS IsReady",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "NuuData_Chipper_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "exportNuuDW.ChipperTicketsComments"
								}
							}
						}
					},
					{
						"name": "Evaluate_IsReady_flag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup_IsReady_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup_IsReady_flag').output.firstRow.IsReady,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "IsReady",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "The source was not ready at execution time. Try re-running the pipeline at a later time.",
										"errorCode": "0"
									}
								}
							]
						}
					},
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Evaluate_IsReady_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuData_Chipper",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "SqlServer",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "exportNuuDW",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "ChipperTicketsComments",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuuDataChipper",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "DWModifiedDate",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "True",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "nuuMeta.[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuData_Chipper"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": ""
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "exportNuuDW"
									},
									"SourceTableName": {
										"type": "String",
										"value": "ChipperTicketsComments"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "SqlServer"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "True"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_ChipperTicketsComments",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "\r\nSELECT \r\n[comments.author] \r\n,[comments.text] \r\n,[comments.timestamp] \r\n,[id] \r\n,[sourceFilename] \r\n,[processedTimestamp] \r\n,[hour] \r\n,[quarterhour] \r\n,[DWSourceFilePath] AS [SRC_DWSourceFilePath]\r\n,[DWIsCurrent] AS [SRC_DWIsCurrent]\r\n,[DWValidFromDate] AS [SRC_DWValidFromDate]\r\n,[DWValidToDate] AS [SRC_DWValidToDate]\r\n,[DWCreatedDate] AS [SRC_DWCreatedDate]\r\n,[DWModifiedDate] AS [SRC_DWModifiedDate]\r\n,[DWIsDeletedInSource] AS [SRC_DWIsDeletedInSource]\r\n,[DWDeletedInSourceDate] AS [SRC_DWDeletedInSourceDate]\r\n \r\nFROM exportNuuDW.[ChipperTicketsComments]\r\n WHERE DWModifiedDate > convert(datetime, stuff(stuff(stuff('@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}', 9, 0, ' '), 12, 0, ':'), 15, 0, ':'))",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuuDataChipper].[ChipperTicketsComments]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "NuuData_Chipper_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "exportNuuDW.ChipperTicketsComments"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuuDataChipper].[ChipperTicketsComments]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_ChipperTicketsComments",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[LoadSourceObjectHistory]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuuDataChipper.ChipperTicketsComments",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"HistoryTrackingColumns": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuData_Chipper",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "exportNuuDW",
									"type": "String"
								},
								"SourceTableName": {
									"value": "ChipperTicketsComments",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "True",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/NuuData_Chipper_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuData_Chipper_ChipperTicketsEventLog')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_IsReady_flag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT 1 AS IsReady",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "NuuData_Chipper_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "exportNuuDW.ChipperTicketsEventLog"
								}
							}
						}
					},
					{
						"name": "Evaluate_IsReady_flag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup_IsReady_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup_IsReady_flag').output.firstRow.IsReady,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "IsReady",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "The source was not ready at execution time. Try re-running the pipeline at a later time.",
										"errorCode": "0"
									}
								}
							]
						}
					},
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Evaluate_IsReady_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuData_Chipper",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "SqlServer",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "exportNuuDW",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "ChipperTicketsEventLog",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuuDataChipper",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "DWModifiedDate",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "True",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "nuuMeta.[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuData_Chipper"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": ""
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "exportNuuDW"
									},
									"SourceTableName": {
										"type": "String",
										"value": "ChipperTicketsEventLog"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "SqlServer"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "True"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_ChipperTicketsEventLog",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "\r\nSELECT \r\n[eventLog.eventType] \r\n,[eventLog.source.applicationId] \r\n,[eventLog.source.userId] \r\n,[id] \r\n,[eventLog.timestamp] \r\n,[sourceFilename] \r\n,[processedTimestamp] \r\n,[hour] \r\n,[quarterhour] \r\n,[DWSourceFilePath] AS [SRC_DWSourceFilePath]\r\n,[DWIsCurrent] AS [SRC_DWIsCurrent]\r\n,[DWValidFromDate] AS [SRC_DWValidFromDate]\r\n,[DWValidToDate] AS [SRC_DWValidToDate]\r\n,[DWCreatedDate] AS [SRC_DWCreatedDate]\r\n,[DWModifiedDate] AS [SRC_DWModifiedDate]\r\n,[DWIsDeletedInSource] AS [SRC_DWIsDeletedInSource]\r\n,[DWDeletedInSourceDate] AS [SRC_DWDeletedInSourceDate]\r\n,[eventLog.source.error.userId] \r\n \r\nFROM exportNuuDW.[ChipperTicketsEventLog]\r\n WHERE DWModifiedDate > convert(datetime, stuff(stuff(stuff('@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}', 9, 0, ' '), 12, 0, ':'), 15, 0, ':'))",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuuDataChipper].[ChipperTicketsEventLog]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "NuuData_Chipper_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "exportNuuDW.ChipperTicketsEventLog"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuuDataChipper].[ChipperTicketsEventLog]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_ChipperTicketsEventLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[LoadSourceObjectHistory]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuuDataChipper.ChipperTicketsEventLog",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"HistoryTrackingColumns": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuData_Chipper",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "exportNuuDW",
									"type": "String"
								},
								"SourceTableName": {
									"value": "ChipperTicketsEventLog",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "True",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/NuuData_Chipper_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuData_Chipper_ChipperTicketsTags')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_IsReady_flag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT 1 AS IsReady",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "NuuData_Chipper_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "exportNuuDW.ChipperTicketsTags"
								}
							}
						}
					},
					{
						"name": "Evaluate_IsReady_flag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup_IsReady_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup_IsReady_flag').output.firstRow.IsReady,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "IsReady",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "The source was not ready at execution time. Try re-running the pipeline at a later time.",
										"errorCode": "0"
									}
								}
							]
						}
					},
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Evaluate_IsReady_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuData_Chipper",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "SqlServer",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "exportNuuDW",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "ChipperTicketsTags",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuuDataChipper",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "DWModifiedDate",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "True",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "nuuMeta.[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuData_Chipper"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": ""
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "exportNuuDW"
									},
									"SourceTableName": {
										"type": "String",
										"value": "ChipperTicketsTags"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "SqlServer"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "True"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_ChipperTicketsTags",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "\r\nSELECT \r\n[id] \r\n,[tags] \r\n,[sourceFilename] \r\n,[processedTimestamp] \r\n,[hour] \r\n,[quarterhour] \r\n,[DWSourceFilePath] AS [SRC_DWSourceFilePath]\r\n,[DWIsCurrent] AS [SRC_DWIsCurrent]\r\n,[DWValidFromDate] AS [SRC_DWValidFromDate]\r\n,[DWValidToDate] AS [SRC_DWValidToDate]\r\n,[DWCreatedDate] AS [SRC_DWCreatedDate]\r\n,[DWModifiedDate] AS [SRC_DWModifiedDate]\r\n,[DWIsDeletedInSource] AS [SRC_DWIsDeletedInSource]\r\n,[DWDeletedInSourceDate] AS [SRC_DWDeletedInSourceDate]\r\n \r\nFROM exportNuuDW.[ChipperTicketsTags]\r\n WHERE DWModifiedDate > convert(datetime, stuff(stuff(stuff('@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}', 9, 0, ' '), 12, 0, ':'), 15, 0, ':'))",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuuDataChipper].[ChipperTicketsTags]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "NuuData_Chipper_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "exportNuuDW.ChipperTicketsTags"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuuDataChipper].[ChipperTicketsTags]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_ChipperTicketsTags",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[LoadSourceObjectHistory]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuuDataChipper.ChipperTicketsTags",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"HistoryTrackingColumns": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuData_Chipper",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "exportNuuDW",
									"type": "String"
								},
								"SourceTableName": {
									"value": "ChipperTicketsTags",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "True",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/NuuData_Chipper_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_NuuData_Chipper_ChipperTicketsTickets')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_IsReady_flag",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT 1 AS IsReady",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "NuuData_Chipper_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "exportNuuDW.ChipperTicketsTickets"
								}
							}
						}
					},
					{
						"name": "Evaluate_IsReady_flag",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup_IsReady_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup_IsReady_flag').output.firstRow.IsReady,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "IsReady",
									"type": "Fail",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"message": "The source was not ready at execution time. Try re-running the pipeline at a later time.",
										"errorCode": "0"
									}
								}
							]
						}
					},
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Evaluate_IsReady_flag",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuData_Chipper",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "SqlServer",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "exportNuuDW",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "ChipperTicketsTickets",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuuDataChipper",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "DWModifiedDate",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "True",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "nuuMeta.[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "NuuData_Chipper"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": ""
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "exportNuuDW"
									},
									"SourceTableName": {
										"type": "String",
										"value": "ChipperTicketsTickets"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "SqlServer"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "True"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_ChipperTicketsTickets",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "\r\nSELECT \r\n[appointment.id] \r\n,[assignee] \r\n,[created] \r\n,[customer.contact.channels.email.address] \r\n,[customer.contact.channels.email.preferred] \r\n,[customer.contact.channels.phone.number] \r\n,[customer.contact.channels.phone.preferred] \r\n,[customer.contact.name] \r\n,[customer.id] \r\n,[id] \r\n,[impact] \r\n,[issue.description] \r\n,[issue.start] \r\n,[issue.type] \r\n,[item.lid] \r\n,[reported] \r\n,[resolved] \r\n,[sla.id] \r\n,[status] \r\n,[subject] \r\n,[updated] \r\n,[sourceFilename] \r\n,[processedTimestamp] \r\n,[hour] \r\n,[quarterhour] \r\n,[DWSourceFilePath] AS [SRC_DWSourceFilePath]\r\n,[DWIsCurrent] AS [SRC_DWIsCurrent]\r\n,[DWValidFromDate] AS [SRC_DWValidFromDate]\r\n,[DWValidToDate] AS [SRC_DWValidToDate]\r\n,[DWCreatedDate] AS [SRC_DWCreatedDate]\r\n,[DWModifiedDate] AS [SRC_DWModifiedDate]\r\n,[DWIsDeletedInSource] AS [SRC_DWIsDeletedInSource]\r\n,[DWDeletedInSourceDate] AS [SRC_DWDeletedInSourceDate]\r\n,[product.id] \r\n,[outageid] \r\n \r\nFROM exportNuuDW.[ChipperTicketsTickets]\r\n WHERE DWModifiedDate > convert(datetime, stuff(stuff(stuff('@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}', 9, 0, ' '), 12, 0, ':'), 15, 0, ':'))",
									"type": "Expression"
								},
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuuDataChipper].[ChipperTicketsTickets]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "NuuData_Chipper_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "exportNuuDW.ChipperTicketsTickets"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuuDataChipper].[ChipperTicketsTickets]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_ChipperTicketsTickets",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[LoadSourceObjectHistory]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuuDataChipper.ChipperTicketsTickets",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"HistoryTrackingColumns": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "nuuMeta.[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuData_Chipper",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "exportNuuDW",
									"type": "String"
								},
								"SourceTableName": {
									"value": "ChipperTicketsTickets",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "True",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/NuuData_Chipper_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_Nuudl_NetCracker_pimnrmlcustomercategory')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "pimnrmlcustomercategory",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlNetCracker",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlcustomercategory"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlcustomercategory"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_pimnrmlcustomercategory",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`localized_name_json_dan` \r\n,`id` \r\n,`name` \r\n,`parent_customer_category_id` \r\n,`external_id` \r\n,`extended_parameters` \r\n,`cdc_revision_id` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ID` \r\n,`NUUDL_CuratedBatchID` \r\n \r\nFROM dai.netcracker.`pimnrmlcustomercategory`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlNetCracker].[pimnrmlcustomercategory]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "Nuudl_NetCracker_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker.pimnrmlcustomercategory"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlNetCracker].[pimnrmlcustomercategory]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_pimnrmlcustomercategory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlNetCracker.pimnrmlcustomercategory",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceTableName": {
									"value": "pimnrmlcustomercategory",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/Nuudl_NetCracker_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_Nuudl_NetCracker_pimnrmldistributionchannel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "pimnrmldistributionchannel",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlNetCracker",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmldistributionchannel"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmldistributionchannel"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_pimnrmldistributionchannel",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`localized_name_json_dan` \r\n,`id` \r\n,`name` \r\n,`extended_parameters_json_insurancePolicyPrefix` \r\n,`extended_parameters_json_storeAddress` \r\n,`external_id` \r\n,`extended_parameters_json_storeName` \r\n,`extended_parameters_json__corrupt_record` \r\n,`extended_parameters_json_channelType` \r\n,`extended_parameters_json_storeID` \r\n,`cdc_revision_id` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ID` \r\n,`NUUDL_CuratedBatchID` \r\n \r\nFROM dai.netcracker.`pimnrmldistributionchannel`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlNetCracker].[pimnrmldistributionchannel]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "Nuudl_NetCracker_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker.pimnrmldistributionchannel"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlNetCracker].[pimnrmldistributionchannel]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_pimnrmldistributionchannel",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlNetCracker.pimnrmldistributionchannel",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceTableName": {
									"value": "pimnrmldistributionchannel",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/Nuudl_NetCracker_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_Nuudl_NetCracker_pimnrmlprodcatprodoffering')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "pimnrmlprodcatprodoffering",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlNetCracker",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlprodcatprodoffering"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlprodcatprodoffering"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_pimnrmlprodcatprodoffering",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`product_catalog_id` \r\n,`product_offering_id` \r\n,`cdc_revision_id` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ID` \r\n,`NUUDL_CuratedBatchID` \r\n \r\nFROM dai.netcracker.`pimnrmlprodcatprodoffering`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlNetCracker].[pimnrmlprodcatprodoffering]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "Nuudl_NetCracker_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker.pimnrmlprodcatprodoffering"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlNetCracker].[pimnrmlprodcatprodoffering]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_pimnrmlprodcatprodoffering",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlNetCracker.pimnrmlprodcatprodoffering",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceTableName": {
									"value": "pimnrmlprodcatprodoffering",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/Nuudl_NetCracker_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_Nuudl_NetCracker_pimnrmlprodofferingpricespecification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "pimnrmlprodofferingpricespecification",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlNetCracker",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlprodofferingpricespecification"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlprodofferingpricespecification"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_pimnrmlprodofferingpricespecification",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`external_id` \r\n,`id` \r\n,`name` \r\n,`price_type` \r\n,`extended_parameters` \r\n,`cdc_revision_id` \r\n,`localized_name_json_dan` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ID` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n \r\nFROM dai.netcracker.`pimnrmlprodofferingpricespecification`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlNetCracker].[pimnrmlprodofferingpricespecification]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "Nuudl_NetCracker_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker.pimnrmlprodofferingpricespecification"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlNetCracker].[pimnrmlprodofferingpricespecification]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_pimnrmlprodofferingpricespecification",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlNetCracker.pimnrmlprodofferingpricespecification",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceTableName": {
									"value": "pimnrmlprodofferingpricespecification",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/Nuudl_NetCracker_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_Nuudl_NetCracker_pimnrmlproductcatalog')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "pimnrmlproductcatalog",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlNetCracker",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlproductcatalog"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlproductcatalog"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_pimnrmlproductcatalog",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\nSELECT \n`localized_name_json_dan` \n,`id` \n,`name` \n,`external_id` \n--,`extended_parameters` \n,`cdc_revision_id` \n,`NUUDL_ValidFrom` \n,`NUUDL_ValidTo` \n,`NUUDL_IsCurrent` \n,`NUUDL_ID` \n,`NUUDL_CuratedBatchID` \n \nFROM dai.netcracker.`pimnrmlproductcatalog`\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlNetCracker].[pimnrmlproductcatalog]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "Nuudl_NetCracker_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker.pimnrmlproductcatalog"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlNetCracker].[pimnrmlproductcatalog]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_pimnrmlproductcatalog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlNetCracker.pimnrmlproductcatalog",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceTableName": {
									"value": "pimnrmlproductcatalog",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/Nuudl_NetCracker_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_Nuudl_NetCracker_pimnrmlproductfamily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "pimnrmlproductfamily",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlNetCracker",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlproductfamily"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlproductfamily"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_pimnrmlproductfamily",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`localized_name_json_dan` \r\n,`id` \r\n,`name` \r\n,`external_id` \r\n,`extended_parameters` \r\n,`cdc_revision_id` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ID` \r\n,`NUUDL_CuratedBatchID` \r\n \r\nFROM dai.netcracker.`pimnrmlproductfamily`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlNetCracker].[pimnrmlproductfamily]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "Nuudl_NetCracker_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker.pimnrmlproductfamily"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlNetCracker].[pimnrmlproductfamily]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_pimnrmlproductfamily",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlNetCracker.pimnrmlproductfamily",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceTableName": {
									"value": "pimnrmlproductfamily",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/Nuudl_NetCracker_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_Nuudl_NetCracker_pimnrmlproductoffering')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "pimnrmlproductoffering",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlNetCracker",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlproductoffering"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlproductoffering"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_pimnrmlproductoffering",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\nSELECT \n`available_from` \n,`available_to` \n,`localized_name_json_dan` \n,`id` \n,`is_active` \n,`name` \n,`product_family_id` \n,`product_offering_charging_type` \n,`sku_id` \n,`tags_json__corrupt_record` \n,`weight` \n,`external_id` \n,`extended_parameters_json_termsConditionsType` \n,`extended_parameters_json_offeringBusinessUse` \n,`extended_parameters_json__corrupt_record` \n,`extended_parameters_json_mobileAddOnType` \n,`extended_parameters_json_deviceType` \n,`extended_parameters_json_offeringBusinessType` \n,`extended_parameters_json_migrationId` \n,`extended_parameters_json_NumberInWarehouse` \n,`extended_parameters_json_phoneNumberOfferingType` \n,`extended_parameters_json_noInWarehouse` \n,`extended_parameters_json_simOfferingType` \n,`tangible_product_id` \n--,`included_distribution_channels_json__corrupt_record` \n--,`included_brand_json__corrupt_record` \n,`included_markets_json__corrupt_record` \n,`included_customer_categories_json__corrupt_record` \n,`excluded_markets` \n,`excluded_customer_categories` \n--,`excluded_distribution_channels` \n,`product_specification_id` \n,`cdc_revision_id` \n,`is_current` \n,`NUUDL_ValidFrom` \n,`NUUDL_ValidTo` \n,`NUUDL_IsCurrent` \n,`NUUDL_ID` \n--,`NUUDL_CuratedBatchID` \n \nFROM dai.netcracker.`pimnrmlproductoffering`\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlNetCracker].[pimnrmlproductoffering]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "Nuudl_NetCracker_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker.pimnrmlproductoffering"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlNetCracker].[pimnrmlproductoffering]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_pimnrmlproductoffering",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlNetCracker.pimnrmlproductoffering",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceTableName": {
									"value": "pimnrmlproductoffering",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/Nuudl_NetCracker_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_Nuudl_NetCracker_pimnrmlproductofferingpricechargeitem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "pimnrmlproductofferingpricechargeitem",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlNetCracker",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlproductofferingpricechargeitem"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlproductofferingpricechargeitem"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_pimnrmlproductofferingpricechargeitem",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`amount` \r\n,`applied_from` \r\n,`applied_to` \r\n,`down_payment_amount` \r\n,`id` \r\n,`is_overridable` \r\n,`price_key_id` \r\n,`cdc_revision_id` \r\n,`context_top_offering_ids_json__corrupt_record` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ID` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`pimnrmlproductofferingpricechargeitem`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlNetCracker].[pimnrmlproductofferingpricechargeitem]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "Nuudl_NetCracker_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker.pimnrmlproductofferingpricechargeitem"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlNetCracker].[pimnrmlproductofferingpricechargeitem]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_pimnrmlproductofferingpricechargeitem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlNetCracker.pimnrmlproductofferingpricechargeitem",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceTableName": {
									"value": "pimnrmlproductofferingpricechargeitem",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/Nuudl_NetCracker_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_Nuudl_NetCracker_pimnrmlproductofferingpricechargekey')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "pimnrmlproductofferingpricechargekey",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlNetCracker",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlproductofferingpricechargekey"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlproductofferingpricechargekey"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_pimnrmlproductofferingpricechargekey",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`available_from` \r\n,`available_to` \r\n,`currency_id` \r\n,`localized_name` \r\n,`id` \r\n,`is_base` \r\n,`is_default` \r\n,`name` \r\n,`price_list_id` \r\n,`prod_offering_price_spec_id` \r\n,`alternate_price_key_id` \r\n,`external_id` \r\n,`prod_offering_id` \r\n,`tangible_product_sale_type_id` \r\n,`installment_plan_id` \r\n,`price_eligibility_condition_id` \r\n,`cdc_revision_id` \r\n,`prod_offering_price_policy_condition_ids_json__corrupt_record` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ID` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`pimnrmlproductofferingpricechargekey`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlNetCracker].[pimnrmlproductofferingpricechargekey]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "Nuudl_NetCracker_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker.pimnrmlproductofferingpricechargekey"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlNetCracker].[pimnrmlproductofferingpricechargekey]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_pimnrmlproductofferingpricechargekey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlNetCracker.pimnrmlproductofferingpricechargekey",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceTableName": {
									"value": "pimnrmlproductofferingpricechargekey",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/Nuudl_NetCracker_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_1_Nuudl_NetCracker_pimnrmlpromotionprodofferingpricealteration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Update_Meta_Tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[UpdateSourceTables]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceConnectionType": {
									"value": "AzureDatabricksDeltaLake",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceObjectName": {
									"value": "pimnrmlpromotionprodofferingpricealteration",
									"type": "String"
								},
								"DestinationSchemaName": {
									"value": "sourceNuudlNetCracker",
									"type": "String"
								},
								"WatermarkColumnName": {
									"value": "NUUDL_CuratedBatchID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								},
								"WatermarkRollingWindowDays": {
									"value": "0",
									"type": "Int32"
								},
								"WatermarkInQuery": {
									"value": "",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Lookup_Last_Value_Loaded",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Update_Meta_Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetLastValueLoaded]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlpromotionprodofferingpricealteration"
									},
									"JobIsIncremental": {
										"type": "Boolean",
										"value": {
											"value": "@pipeline().parameters.JobIsIncremental",
											"type": "Expression"
										}
									},
									"ConnectionType": {
										"type": "String",
										"value": "AzureDatabricksDeltaLake"
									},
									"WatermarkIsDate": {
										"type": "Boolean",
										"value": "False"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Lookup_Source_Schema_Name",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup_Last_Value_Loaded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderStoredProcedureName": "[[nuuMeta].[GetSourceSchemaName]",
								"storedProcedureParameters": {
									"SourceConnectionName": {
										"type": "String",
										"value": "Nuudl_NetCracker"
									},
									"SourceCatalogName": {
										"type": "String",
										"value": "dai"
									},
									"SourceSchemaName": {
										"type": "String",
										"value": "netcracker"
									},
									"SourceTableName": {
										"type": "String",
										"value": "pimnrmlpromotionprodofferingpricealteration"
									}
								},
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjects"
								}
							}
						}
					},
					{
						"name": "Copy_pimnrmlpromotionprodofferingpricealteration",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup_Source_Schema_Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureDatabricksDeltaLakeSource",
								"query": {
									"value": "\r\nSELECT \r\n`amount` \r\n,`amount_percentage` \r\n,`currency_id` \r\n,`id` \r\n,`name` \r\n,`prod_offering_price_specification_id` \r\n,`extended_parameters` \r\n,`cdc_revision_id` \r\n,`localized_name_json_dan` \r\n,`NUUDL_ValidFrom` \r\n,`NUUDL_ValidTo` \r\n,`NUUDL_IsCurrent` \r\n,`NUUDL_ID` \r\n,`NUUDL_CuratedBatchID` \r\n,`NUUDL_CuratedProcessedTimestamp` \r\n \r\nFROM dai.@{activity('Lookup_Source_Schema_Name').output.firstRow.SourceSchemaName}.`pimnrmlpromotionprodofferingpricealteration`\r\n WHERE NUUDL_CuratedBatchID > '@{activity('Lookup_Last_Value_Loaded').output.firstRow.LastValueLoaded}'",
									"type": "Expression"
								},
								"exportSettings": {
									"type": "AzureDatabricksDeltaLakeExportCommand"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceNuudlNetCracker].[pimnrmlpromotionprodofferingpricealteration]"
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "datalakest01exploration",
									"type": "LinkedServiceReference"
								},
								"path": "adfstage"
							}
						},
						"inputs": [
							{
								"referenceName": "Nuudl_NetCracker_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dai.netcracker.pimnrmlpromotionprodofferingpricealteration"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[[sourceNuudlNetCracker].[pimnrmlpromotionprodofferingpricealteration]"
								}
							}
						]
					},
					{
						"name": "Merge_To_History",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_pimnrmlpromotionprodofferingpricealteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadSourceObjectHistoryInherit]",
							"storedProcedureParameters": {
								"ExtractTable": {
									"value": "sourceNuudlNetCracker.pimnrmlpromotionprodofferingpricealteration",
									"type": "String"
								},
								"LoadIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Merge_To_History",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "Nuudl_NetCracker",
									"type": "String"
								},
								"SourceCatalogName": {
									"value": "dai",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "netcracker",
									"type": "String"
								},
								"SourceTableName": {
									"value": "pimnrmlpromotionprodofferingpricealteration",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "0.1_Extracts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/Nuudl_NetCracker_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_Schema_Cubus31_PCTI')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Maintain Extract Create Schemas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainExtractCreateSchemas]",
							"storedProcedureParameters": {
								"ExtractSchemaName": {
									"value": "SourceCubus31PCTI",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LKP Objects",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Maintain Extract Create Schemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT [SourceSchemaName]\n ,[SourceObjectName]\n,[SourceObjectID]\n FROM [nuuMetaView].[SourceObjectDefinitions]\n  WHERE SourceConnectionName = 'Cubus31_PCTI'",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjectDefinitions"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP Objects').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Information Schema",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "SELECT DISTINCT \n'AzureSqlDatabase' AS SourceSystemTypeName\t\n,COLUMNS.[TABLE_CATALOG] AS TableCatalogName\n,COLUMNS.[TABLE_SCHEMA] AS SchemaName\n,COLUMNS.[TABLE_NAME] AS TableName\n,COLUMNS.[COLUMN_NAME] AS ColumnName\n,COLUMNS.[ORDINAL_POSITION] AS OrdinalPositionNumber\n,COLUMNS.[DATA_TYPE] AS DataTypeName\n,COLUMNS.[CHARACTER_MAXIMUM_LENGTH] AS MaximumLenghtNumber \n,CAST(COLUMNS.[NUMERIC_PRECISION] AS INT) AS NumericPrecisionNumber \n,COLUMNS.[NUMERIC_SCALE] AS NumericScaleNumber \n,KEY_COLUMN_USAGE.ORDINAL_POSITION AS KeySequenceNumber \n,@{item().SourceObjectID} AS SourceObjectID\nFROM \n\tINFORMATION_SCHEMA.COLUMNS\nLEFT JOIN\n\tINFORMATION_SCHEMA.TABLE_CONSTRAINTS\n\t\tON\n\t\t\tTABLE_CONSTRAINTS.TABLE_CATALOG = COLUMNS.TABLE_CATALOG\n\t\tAND\tTABLE_CONSTRAINTS.TABLE_SCHEMA = COLUMNS.TABLE_SCHEMA\n\t\tAND TABLE_CONSTRAINTS.TABLE_NAME = COLUMNS.TABLE_NAME\n\t\tAND TABLE_CONSTRAINTS.CONSTRAINT_TYPE = 'PRIMARY KEY'\nLEFT JOIN \n\tINFORMATION_SCHEMA.KEY_COLUMN_USAGE\nON\t\n\tKEY_COLUMN_USAGE.CONSTRAINT_NAME = TABLE_CONSTRAINTS.CONSTRAINT_NAME\n\tAND KEY_COLUMN_USAGE.COLUMN_NAME = COLUMNS.COLUMN_NAME\nWHERE \n\tCOLUMNS.TABLE_SCHEMA = '@{item().SourceSchemaName}'\n\tAND COLUMNS.TABLE_NAME = '@{item().SourceObjectName}'",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "DELETE FROM nuuMeta.SourceInformationSchema WHERE SourceObjectID = '@{item().SourceObjectID}'",
												"type": "Expression"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "Cubus31_PCTI_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "INFORMATION_SCHEMA.COLUMNS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "nuudwsqldb01_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "nuuMeta.SourceInformationSchema"
											}
										}
									]
								},
								{
									"name": "SP Maintain Extract",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Information Schema",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[nuuMeta].[MaintainExtract]",
										"storedProcedureParameters": {
											"SourceObjectID": {
												"value": {
													"value": "@{item().SourceObjectID}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"CreateTable": {
												"value": {
													"value": "@pipeline().parameters.CreateTable",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"UpdateSourceScript": {
												"value": {
													"value": "@pipeline().parameters.UpdateSourceScript",
													"type": "Expression"
												},
												"type": "Boolean"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "nuudwsqldb01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CreateTable": {
						"type": "bool",
						"defaultValue": true
					},
					"UpdateSourceScript": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"SchemaName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/Cubus31_PCTI_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_Schema_Cubus_MasterData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Maintain Extract Create Schemas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainExtractCreateSchemas]",
							"storedProcedureParameters": {
								"ExtractSchemaName": {
									"value": "SourceCubusMasterData",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LKP Objects",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Maintain Extract Create Schemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT [SourceSchemaName]\n ,[SourceObjectName]\n,[SourceObjectID]\n FROM [nuuMetaView].[SourceObjectDefinitions]\n  WHERE SourceConnectionName = 'Cubus_MasterData'",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjectDefinitions"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP Objects').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Information Schema",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "SELECT DISTINCT \n'AzureSqlDatabase' AS SourceSystemTypeName\t\n,COLUMNS.[TABLE_CATALOG] AS TableCatalogName\n,COLUMNS.[TABLE_SCHEMA] AS SchemaName\n,COLUMNS.[TABLE_NAME] AS TableName\n,COLUMNS.[COLUMN_NAME] AS ColumnName\n,COLUMNS.[ORDINAL_POSITION] AS OrdinalPositionNumber\n,COLUMNS.[DATA_TYPE] AS DataTypeName\n,COLUMNS.[CHARACTER_MAXIMUM_LENGTH] AS MaximumLenghtNumber \n,CAST(COLUMNS.[NUMERIC_PRECISION] AS INT) AS NumericPrecisionNumber \n,COLUMNS.[NUMERIC_SCALE] AS NumericScaleNumber \n,KEY_COLUMN_USAGE.ORDINAL_POSITION AS KeySequenceNumber \n,@{item().SourceObjectID} AS SourceObjectID\nFROM \n\tINFORMATION_SCHEMA.COLUMNS\nLEFT JOIN\n\tINFORMATION_SCHEMA.TABLE_CONSTRAINTS\n\t\tON\n\t\t\tTABLE_CONSTRAINTS.TABLE_CATALOG = COLUMNS.TABLE_CATALOG\n\t\tAND\tTABLE_CONSTRAINTS.TABLE_SCHEMA = COLUMNS.TABLE_SCHEMA\n\t\tAND TABLE_CONSTRAINTS.TABLE_NAME = COLUMNS.TABLE_NAME\n\t\tAND TABLE_CONSTRAINTS.CONSTRAINT_TYPE = 'PRIMARY KEY'\nLEFT JOIN \n\tINFORMATION_SCHEMA.KEY_COLUMN_USAGE\nON\t\n\tKEY_COLUMN_USAGE.CONSTRAINT_NAME = TABLE_CONSTRAINTS.CONSTRAINT_NAME\n\tAND KEY_COLUMN_USAGE.COLUMN_NAME = COLUMNS.COLUMN_NAME\nWHERE \n\tCOLUMNS.TABLE_SCHEMA = '@{item().SourceSchemaName}'\n\tAND COLUMNS.TABLE_NAME = '@{item().SourceObjectName}'",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "DELETE FROM nuuMeta.SourceInformationSchema WHERE SourceObjectID = '@{item().SourceObjectID}'",
												"type": "Expression"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "Cubus_MasterData_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "INFORMATION_SCHEMA.COLUMNS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "nuudwsqldb01_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "nuuMeta.SourceInformationSchema"
											}
										}
									]
								},
								{
									"name": "SP Maintain Extract",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Information Schema",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[nuuMeta].[MaintainExtract]",
										"storedProcedureParameters": {
											"SourceObjectID": {
												"value": {
													"value": "@{item().SourceObjectID}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"CreateTable": {
												"value": {
													"value": "@pipeline().parameters.CreateTable",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"UpdateSourceScript": {
												"value": {
													"value": "@pipeline().parameters.UpdateSourceScript",
													"type": "Expression"
												},
												"type": "Boolean"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "nuudwsqldb01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CreateTable": {
						"type": "bool",
						"defaultValue": true
					},
					"UpdateSourceScript": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"SchemaName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/Cubus_MasterData_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_Schema_NuuDL_BIZ')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Maintain Extract Create Schemas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainExtractCreateSchemas]",
							"storedProcedureParameters": {
								"ExtractSchemaName": {
									"value": "sourceNuudlBIZ",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LKP Objects",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Maintain Extract Create Schemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT \n    SourceCatalogName,\n    SourceSchemaName,\n    SourceObjectName,  \n    [SourceObjectID]\n FROM [nuuMetaView].[SourceObjectDefinitions]\n WHERE SourceConnectionName = 'NuuDL_BIZ' AND LockObject = 0",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMetaView.SourceObjectDefinitions"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP Objects').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Information Schema",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureDatabricksDeltaLakeSource",
											"query": {
												"value": "SELECT\n    'AzureDatabricksDeltaLake' AS SourceSystemTypeName\n    , table_catalog AS TableCatalogName\n    , table_schema AS SchemaName\n    , table_name AS TableName\n    , column_name AS ColumnName\n    , ordinal_position AS OrdinalPositionNumber\n    , full_data_type AS DataTypeName\n    ,'@{item().SourceObjectID}' AS SourceObjectID\nFROM system.information_schema.columns\nWHERE table_catalog = '@{item().SourceCatalogName}'\n  AND table_schema = '@{item().SourceSchemaName}'\n  AND table_name = '@{item().SourceObjectName}'",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "AzureDatabricksDeltaLakeExportCommand"
											}
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "DELETE FROM nuuMeta.SourceInformationSchema WHERE SourceObjectID = '@{item().SourceObjectID}'",
												"type": "Expression"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "datalakest01exploration",
												"type": "LinkedServiceReference"
											},
											"path": "adfstage"
										}
									},
									"inputs": [
										{
											"referenceName": "NuuDL_UnityCatalog_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "INFORMATION_SCHEMA.COLUMNS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "nuudwsqldb01_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "nuuMeta.SourceInformationSchema"
											}
										}
									]
								},
								{
									"name": "SP Maintain Extract",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Information Schema",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[nuuMeta].[MaintainExtract]",
										"storedProcedureParameters": {
											"SourceObjectID": {
												"value": {
													"value": "@{item().SourceObjectID}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"CreateTable": {
												"value": {
													"value": "@pipeline().parameters.CreateTable",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"UpdateSourceScript": {
												"value": {
													"value": "@pipeline().parameters.UpdateSourceScript",
													"type": "Expression"
												},
												"type": "Boolean"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "nuudwsqldb01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CreateTable": {
						"type": "bool",
						"defaultValue": true
					},
					"UpdateSourceScript": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"SchemaName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_UnityCatalog_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_Schema_NuuDL_Columbus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Maintain Extract Create Schemas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainExtractCreateSchemas]",
							"storedProcedureParameters": {
								"ExtractSchemaName": {
									"value": "sourceNuudlColumbus",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LKP Objects",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Maintain Extract Create Schemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT [SourceObjectID]\n,NUUDLJobCode\n FROM [nuuMetaView].[SourceObjectDefinitions]\n WHERE SourceConnectionName = 'NuuDL_Columbus'",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMetaView.SourceObjectDefinitions"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP Objects').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Information Schema",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "SELECT\n[SourceSystemTypeName]\n,[TableCatalogName]\n,SchemaName\n,URI AS [TableName]\n,[ColumnName]\n,[OrdinalPositionNumber]\n,[DataTypeName]\n,[MaximumLenghtNumber]\n,[NumericPrecisionNumber]\n,[NumericScaleNumber]\n,[KeySequenceNumber]\n,'@{item().SourceObjectID}' AS SourceObjectID\nFROM [nuudataload].[v_Schema]\nWHERE NUUDLJobCode = '@{item().NUUDLJobCode}'\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "DELETE FROM nuuMeta.SourceInformationSchema WHERE SourceObjectID = '@{item().SourceObjectID}'",
												"type": "Expression"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "ingestsqldb01_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "INFORMATION_SCHEMA.COLUMNS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "nuudwsqldb01_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "nuuMeta.SourceInformationSchema"
											}
										}
									]
								},
								{
									"name": "SP Maintain Extract",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Information Schema",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[nuuMeta].[MaintainExtract]",
										"storedProcedureParameters": {
											"SourceObjectID": {
												"value": {
													"value": "@{item().SourceObjectID}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"CreateTable": {
												"value": {
													"value": "@pipeline().parameters.CreateTable",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"UpdateSourceScript": {
												"value": {
													"value": "@pipeline().parameters.UpdateSourceScript",
													"type": "Expression"
												},
												"type": "Boolean"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "nuudwsqldb01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CreateTable": {
						"type": "bool",
						"defaultValue": true
					},
					"UpdateSourceScript": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"SchemaName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/ingestsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_Schema_NuuDL_Dawn')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Maintain Extract Create Schemas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainExtractCreateSchemas]",
							"storedProcedureParameters": {
								"ExtractSchemaName": {
									"value": "sourceNuudlDawn",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LKP Objects",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Maintain Extract Create Schemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT \n    SourceCatalogName,\n    SourceSchemaName,\n    SourceObjectName,  \n    [SourceObjectID]\n FROM [nuuMetaView].[SourceObjectDefinitions]\n WHERE SourceConnectionName = 'NuuDL_Dawn' AND LockObject = 0",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMetaView.SourceObjectDefinitions"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP Objects').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Information Schema",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureDatabricksDeltaLakeSource",
											"query": {
												"value": "SELECT\n    'AzureDatabricksDeltaLake' AS SourceSystemTypeName\n    , table_catalog AS TableCatalogName\n    , table_schema AS SchemaName\n    , table_name AS TableName\n    , column_name AS ColumnName\n    , ordinal_position AS OrdinalPositionNumber\n    , full_data_type AS DataTypeName\n    ,'@{item().SourceObjectID}' AS SourceObjectID\nFROM system.information_schema.columns\nWHERE table_catalog = '@{item().SourceCatalogName}'\n  AND table_schema = '@{item().SourceSchemaName}'\n  AND table_name = '@{item().SourceObjectName}'",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "AzureDatabricksDeltaLakeExportCommand"
											}
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "DELETE FROM nuuMeta.SourceInformationSchema WHERE SourceObjectID = '@{item().SourceObjectID}'",
												"type": "Expression"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "datalakest01exploration",
												"type": "LinkedServiceReference"
											},
											"path": "adfstage"
										}
									},
									"inputs": [
										{
											"referenceName": "NuuDL_UnityCatalog_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "INFORMATION_SCHEMA.COLUMNS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "nuudwsqldb01_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "nuuMeta.SourceInformationSchema"
											}
										}
									]
								},
								{
									"name": "SP Maintain Extract",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Information Schema",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[nuuMeta].[MaintainExtract]",
										"storedProcedureParameters": {
											"SourceObjectID": {
												"value": {
													"value": "@{item().SourceObjectID}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"CreateTable": {
												"value": {
													"value": "@pipeline().parameters.CreateTable",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"UpdateSourceScript": {
												"value": {
													"value": "@pipeline().parameters.UpdateSourceScript",
													"type": "Expression"
												},
												"type": "Boolean"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "nuudwsqldb01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CreateTable": {
						"type": "bool",
						"defaultValue": true
					},
					"UpdateSourceScript": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"SchemaName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_UnityCatalog_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_Schema_NuuDL_Linkit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Maintain Extract Create Schemas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainExtractCreateSchemas]",
							"storedProcedureParameters": {
								"ExtractSchemaName": {
									"value": "SourceNuudlLinkit",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LKP Objects",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Maintain Extract Create Schemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT [SourceObjectID]\n,NUUDLJobCode\n FROM [nuuMetaView].[SourceObjectDefinitions]\n WHERE SourceConnectionName = 'NuuDL_Linkit'",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMetaView.SourceObjectDefinitions"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP Objects').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Information Schema",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "SELECT\n[SourceSystemTypeName]\n,[TableCatalogName]\n,SchemaName\n,URI AS [TableName]\n,[ColumnName]\n,[OrdinalPositionNumber]\n,[DataTypeName]\n,[MaximumLenghtNumber]\n,[NumericPrecisionNumber]\n,[NumericScaleNumber]\n,[KeySequenceNumber]\n,'@{item().SourceObjectID}' AS SourceObjectID\nFROM [nuudataload].[v_Schema]\nWHERE NUUDLJobCode = '@{item().NUUDLJobCode}'\n",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "DELETE FROM nuuMeta.SourceInformationSchema WHERE SourceObjectID = '@{item().SourceObjectID}'",
												"type": "Expression"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "ingestsqldb01_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "INFORMATION_SCHEMA.COLUMNS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "nuudwsqldb01_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "nuuMeta.SourceInformationSchema"
											}
										}
									]
								},
								{
									"name": "SP Maintain Extract",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Information Schema",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[nuuMeta].[MaintainExtract]",
										"storedProcedureParameters": {
											"SourceObjectID": {
												"value": {
													"value": "@{item().SourceObjectID}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"CreateTable": {
												"value": {
													"value": "@pipeline().parameters.CreateTable",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"UpdateSourceScript": {
												"value": {
													"value": "@pipeline().parameters.UpdateSourceScript",
													"type": "Expression"
												},
												"type": "Boolean"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "nuudwsqldb01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CreateTable": {
						"type": "bool",
						"defaultValue": true
					},
					"UpdateSourceScript": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"SchemaName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/ingestsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_Schema_NuuData_Chipper')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Maintain Extract Create Schemas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainExtractCreateSchemas]",
							"storedProcedureParameters": {
								"ExtractSchemaName": {
									"value": "sourceNuuDataChipper",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LKP Objects",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Maintain Extract Create Schemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT [SourceSchemaName]\n ,[SourceObjectName]\n,[SourceObjectID]\n FROM [nuuMetaView].[SourceObjectDefinitions]\n  WHERE SourceConnectionName = 'NuuData_Chipper'",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMeta.SourceObjectDefinitions"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP Objects').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Information Schema",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "SELECT DISTINCT \n'AzureSqlDatabase' AS SourceSystemTypeName\t\n,COLUMNS.[TABLE_CATALOG] AS TableCatalogName\n,COLUMNS.[TABLE_SCHEMA] AS SchemaName\n,COLUMNS.[TABLE_NAME] AS TableName\n,COLUMNS.[COLUMN_NAME] AS ColumnName\n,COLUMNS.[ORDINAL_POSITION] AS OrdinalPositionNumber\n,COLUMNS.[DATA_TYPE] AS DataTypeName\n,COLUMNS.[CHARACTER_MAXIMUM_LENGTH] AS MaximumLenghtNumber \n,CAST(COLUMNS.[NUMERIC_PRECISION] AS INT) AS NumericPrecisionNumber \n,COLUMNS.[NUMERIC_SCALE] AS NumericScaleNumber \n,KEY_COLUMN_USAGE.ORDINAL_POSITION AS KeySequenceNumber \n,@{item().SourceObjectID} AS SourceObjectID\nFROM \n\tINFORMATION_SCHEMA.COLUMNS\nLEFT JOIN\n\tINFORMATION_SCHEMA.TABLE_CONSTRAINTS\n\t\tON\n\t\t\tTABLE_CONSTRAINTS.TABLE_CATALOG = COLUMNS.TABLE_CATALOG\n\t\tAND\tTABLE_CONSTRAINTS.TABLE_SCHEMA = COLUMNS.TABLE_SCHEMA\n\t\tAND TABLE_CONSTRAINTS.TABLE_NAME = COLUMNS.TABLE_NAME\n\t\tAND TABLE_CONSTRAINTS.CONSTRAINT_TYPE = 'PRIMARY KEY'\nLEFT JOIN \n\tINFORMATION_SCHEMA.KEY_COLUMN_USAGE\nON\t\n\tKEY_COLUMN_USAGE.CONSTRAINT_NAME = TABLE_CONSTRAINTS.CONSTRAINT_NAME\n\tAND KEY_COLUMN_USAGE.COLUMN_NAME = COLUMNS.COLUMN_NAME\nWHERE \n\tCOLUMNS.TABLE_SCHEMA = '@{item().SourceSchemaName}'\n\tAND COLUMNS.TABLE_NAME = '@{item().SourceObjectName}'",
												"type": "Expression"
											},
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "DELETE FROM nuuMeta.SourceInformationSchema WHERE SourceObjectID = '@{item().SourceObjectID}'",
												"type": "Expression"
											}
										},
										"enableStaging": false,
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "NuuData_Chipper_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "INFORMATION_SCHEMA.COLUMNS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "nuudwsqldb01_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "nuuMeta.SourceInformationSchema"
											}
										}
									]
								},
								{
									"name": "SP Maintain Extract",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Information Schema",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[nuuMeta].[MaintainExtract]",
										"storedProcedureParameters": {
											"SourceObjectID": {
												"value": {
													"value": "@{item().SourceObjectID}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"CreateTable": {
												"value": {
													"value": "@pipeline().parameters.CreateTable",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"UpdateSourceScript": {
												"value": {
													"value": "@pipeline().parameters.UpdateSourceScript",
													"type": "Expression"
												},
												"type": "Boolean"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "nuudwsqldb01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CreateTable": {
						"type": "bool",
						"defaultValue": true
					},
					"UpdateSourceScript": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"SchemaName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuData_Chipper_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_Schema_NuuDL_NAM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Maintain Extract Create Schemas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainExtractCreateSchemas]",
							"storedProcedureParameters": {
								"ExtractSchemaName": {
									"value": "SourceNuudlNAM",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LKP Objects",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Maintain Extract Create Schemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT \n    SourceCatalogName,\n    SourceSchemaName,\n    SourceObjectName,  \n    [SourceObjectID]\n FROM [nuuMetaView].[SourceObjectDefinitions]\n WHERE SourceConnectionName = 'NuuDL_NAM' AND LockObject = 0",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMetaView.SourceObjectDefinitions"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP Objects').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Information Schema",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureDatabricksDeltaLakeSource",
											"query": {
												"value": "SELECT\n    'AzureDatabricksDeltaLake' AS SourceSystemTypeName\n    , table_catalog AS TableCatalogName\n    , table_schema AS SchemaName\n    , table_name AS TableName\n    , column_name AS ColumnName\n    , ordinal_position AS OrdinalPositionNumber\n    , full_data_type AS DataTypeName\n    ,'@{item().SourceObjectID}' AS SourceObjectID\nFROM system.information_schema.columns\nWHERE table_catalog = '@{item().SourceCatalogName}'\n  AND table_schema = '@{item().SourceSchemaName}'\n  AND table_name = '@{item().SourceObjectName}'",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "AzureDatabricksDeltaLakeExportCommand"
											}
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "DELETE FROM nuuMeta.SourceInformationSchema WHERE SourceObjectID = '@{item().SourceObjectID}'",
												"type": "Expression"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "datalakest01exploration",
												"type": "LinkedServiceReference"
											},
											"path": "adfstage"
										}
									},
									"inputs": [
										{
											"referenceName": "NuuDL_UnityCatalog_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "INFORMATION_SCHEMA.COLUMNS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "nuudwsqldb01_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "nuuMeta.SourceInformationSchema"
											}
										}
									]
								},
								{
									"name": "SP Maintain Extract",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Information Schema",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[nuuMeta].[MaintainExtract]",
										"storedProcedureParameters": {
											"SourceObjectID": {
												"value": {
													"value": "@{item().SourceObjectID}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"CreateTable": {
												"value": {
													"value": "@pipeline().parameters.CreateTable",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"UpdateSourceScript": {
												"value": {
													"value": "@pipeline().parameters.UpdateSourceScript",
													"type": "Expression"
												},
												"type": "Boolean"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "nuudwsqldb01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CreateTable": {
						"type": "bool",
						"defaultValue": true
					},
					"UpdateSourceScript": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"SchemaName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_UnityCatalog_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXT_Schema_Nuudl_NetCracker')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Maintain Extract Create Schemas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainExtractCreateSchemas]",
							"storedProcedureParameters": {
								"ExtractSchemaName": {
									"value": "sourceNuudlNetCracker",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LKP Objects",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Maintain Extract Create Schemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": "SELECT \n    SourceCatalogName,\n    SourceSchemaName,\n    SourceObjectName,  \n    [SourceObjectID]\n FROM [nuuMetaView].[SourceObjectDefinitions]\n WHERE SourceConnectionName = 'Nuudl_NetCracker' AND LockObject = 0",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "nuuMetaView.SourceObjectDefinitions"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP Objects').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy Information Schema",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureDatabricksDeltaLakeSource",
											"query": {
												"value": "SELECT\n    'AzureDatabricksDeltaLake' AS SourceSystemTypeName\n    , table_catalog AS TableCatalogName\n    , table_schema AS SchemaName\n    , table_name AS TableName\n    , column_name AS ColumnName\n    , ordinal_position AS OrdinalPositionNumber\n    , full_data_type AS DataTypeName\n    ,'@{item().SourceObjectID}' AS SourceObjectID\nFROM system.information_schema.columns\nWHERE table_catalog = '@{item().SourceCatalogName}'\n  AND table_schema = '@{item().SourceSchemaName}'\n  AND table_name = '@{item().SourceObjectName}'",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "AzureDatabricksDeltaLakeExportCommand"
											}
										},
										"sink": {
											"type": "SqlSink",
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "DELETE FROM nuuMeta.SourceInformationSchema WHERE SourceObjectID = '@{item().SourceObjectID}'",
												"type": "Expression"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "datalakest01exploration",
												"type": "LinkedServiceReference"
											},
											"path": "adfstage"
										}
									},
									"inputs": [
										{
											"referenceName": "NuuDL_UnityCatalog_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "INFORMATION_SCHEMA.COLUMNS"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "nuudwsqldb01_DynamicDataset",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "nuuMeta.SourceInformationSchema"
											}
										}
									]
								},
								{
									"name": "SP Maintain Extract",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy Information Schema",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[nuuMeta].[MaintainExtract]",
										"storedProcedureParameters": {
											"SourceObjectID": {
												"value": {
													"value": "@{item().SourceObjectID}",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"CreateTable": {
												"value": {
													"value": "@pipeline().parameters.CreateTable",
													"type": "Expression"
												},
												"type": "Boolean"
											},
											"UpdateSourceScript": {
												"value": {
													"value": "@pipeline().parameters.UpdateSourceScript",
													"type": "Expression"
												},
												"type": "Boolean"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "nuudwsqldb01",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CreateTable": {
						"type": "bool",
						"defaultValue": true
					},
					"UpdateSourceScript": {
						"type": "bool",
						"defaultValue": true
					}
				},
				"variables": {
					"SchemaName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/NuuDL_UnityCatalog_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakest01exploration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractInformationSchema_datalake01ingestionNetcracker_interim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Maintain Extract Create Schemas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[meta].[MaintainExtractCreateSchemas]",
							"storedProcedureParameters": {
								"ExtractSchemaName": {
									"value": "sourceDataLakeNetcracker_interim",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LKP Objects",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Maintain Extract Create Schemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n\tSourceObjectID\n        ,ConnectionType\n\t,FileExtension\n\t,FileSystem AS FileSystemName\n\t,FileName\n\t,concat(FileName,'.',FileExtension) AS FullFileName\n\t,Folder\n\t,TargetDestinationFlag\n\t,FileSpecification\n\t,RowSeparator\n\t,ColumnDelimiter\n\t,TextQualifier\n\t,IsHeaderPresent\n\t,Encoding\n\t,LoopFile\n  FROM [meta].[SourceObjectDefinitions]\n  WHERE ConnectionName = 'datalake01ingestionNetcracker_interim'",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "meta.SourceObjectDefinitions"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP Objects').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "If Parquet",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(\ntoLower(item().FileExtension),'parquet'\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "GetMetadata Parquet",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
														"type": "DatasetReference",
														"parameters": {
															"FileSystemName": {
																"value": "@item().FileSystemName",
																"type": "Expression"
															},
															"FolderName": {
																"value": "@item().Folder",
																"type": "Expression"
															},
															"FileName": {
																"value": "@item().FullFileName",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"itemName",
														"structure",
														"columnCount"
													],
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true
													}
												}
											},
											{
												"name": "Maintain Extract Information Schema Parquet",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "GetMetadata Parquet",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtractInformationSchemaFromJsonMeta]",
													"storedProcedureParameters": {
														"JsonOutput": {
															"value": {
																"value": "@string(activity('GetMetadata Parquet').output)",
																"type": "Expression"
															},
															"type": "String"
														},
														"SourceObjectID": {
															"value": {
																"value": "@item().SourceObjectID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "SP Maintain Extract Parquet",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Maintain Extract Information Schema Parquet",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtract]",
													"storedProcedureParameters": {
														"SourceObjectID": {
															"value": {
																"value": "@{item().SourceObjectID}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"DropTable": {
															"value": "true",
															"type": "Boolean"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "If Avro",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(\ntoLower(item().FileExtension),'avro'\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "GetMetadata Avro",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "datalake01ingestionNetcracker_interim_Avro_DynamicDataset",
														"type": "DatasetReference",
														"parameters": {
															"FileSystemName": {
																"value": "@item().FileSystemName",
																"type": "Expression"
															},
															"FolderName": {
																"value": "@item().Folder",
																"type": "Expression"
															},
															"FileName": {
																"value": "@item().FullFileName",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"itemName",
														"structure",
														"columnCount"
													],
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true
													}
												}
											},
											{
												"name": "Maintain Extract Information Schema Avro",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "GetMetadata Avro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtractInformationSchemaFromJsonMeta]",
													"storedProcedureParameters": {
														"JsonOutput": {
															"value": {
																"value": "@string(activity('GetMetadata Avro').output)",
																"type": "Expression"
															},
															"type": "String"
														},
														"SourceObjectID": {
															"value": {
																"value": "@item().SourceObjectID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "SP Maintain Extract Avro",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Maintain Extract Information Schema Avro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtract]",
													"storedProcedureParameters": {
														"SourceObjectID": {
															"value": {
																"value": "@{item().SourceObjectID}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"DropTable": {
															"value": "true",
															"type": "Boolean"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "If Orc",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(\ntoLower(item().FileExtension),'orc'\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "GetMetadata Orc",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "datalake01ingestionNetcracker_interim_Orc_DynamicDataset",
														"type": "DatasetReference",
														"parameters": {
															"FileSystemName": {
																"value": "@item().FileSystemName",
																"type": "Expression"
															},
															"FolderName": {
																"value": "@item().Folder",
																"type": "Expression"
															},
															"FileName": {
																"value": "@item().FullFileName",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"itemName",
														"structure",
														"columnCount"
													],
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true
													}
												}
											},
											{
												"name": "Maintain Extract Information Schema Orc",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "GetMetadata Orc",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtractInformationSchemaFromJsonMeta]",
													"storedProcedureParameters": {
														"JsonOutput": {
															"value": {
																"value": "@string(activity('GetMetadata Orc').output)",
																"type": "Expression"
															},
															"type": "String"
														},
														"SourceObjectID": {
															"value": {
																"value": "@item().SourceObjectID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "SP Maintain Extract Orc",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Maintain Extract Information Schema Orc",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtract]",
													"storedProcedureParameters": {
														"SourceObjectID": {
															"value": {
																"value": "@{item().SourceObjectID}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"DropTable": {
															"value": "true",
															"type": "Boolean"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "If Delimited Text",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(\ntoLower(item().FileExtension),'csv'\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "GetMetadata DelimitedText",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "datalake01ingestionNetcracker_interim_DelimitedText_DynamicDataset",
														"type": "DatasetReference",
														"parameters": {
															"FileSystemName": {
																"value": "@item().FileSystemName",
																"type": "Expression"
															},
															"FolderName": {
																"value": "@item().Folder",
																"type": "Expression"
															},
															"FileName": {
																"value": "@item().FullFileName",
																"type": "Expression"
															},
															"ColumnDelimiter": {
																"value": "@item().ColumnDelimiter",
																"type": "Expression"
															},
															"TextQualifier": {
																"value": "@item().TextQualifier",
																"type": "Expression"
															},
															"IsHeaderPresent": {
																"value": "@item().IsHeaderPresent",
																"type": "Expression"
															},
															"Encoding": {
																"value": "@item().Encoding",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"itemName",
														"structure",
														"columnCount"
													],
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true
													}
												}
											},
											{
												"name": "Maintain Extract Information Schema DelimitedText",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "GetMetadata DelimitedText",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtractInformationSchemaFromJsonMeta]",
													"storedProcedureParameters": {
														"JsonOutput": {
															"value": {
																"value": "@string(activity('GetMetadata DelimitedText').output)",
																"type": "Expression"
															},
															"type": "String"
														},
														"SourceObjectID": {
															"value": {
																"value": "@item().SourceObjectID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "SP Maintain Extract DelimitedText",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Maintain Extract Information Schema DelimitedText",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtract]",
													"storedProcedureParameters": {
														"SourceObjectID": {
															"value": {
																"value": "@{item().SourceObjectID}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"DropTable": {
															"value": "true",
															"type": "Boolean"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "6.Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Avro_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Orc_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_DelimitedText_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_acchasonetimecharge')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_acchasonetimecharge",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[acchasonetimecharge]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-nrm-acchasonetimecharge/",
									"FileName": "interim-nrm-acchasonetimecharge-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.acchasonetimecharge"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_adjustment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_adjustment",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[adjustment]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-nrm-adjustment/",
									"FileName": "interim-nrm-adjustment-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.adjustment"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_billproductcharge')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_billproductcharge",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[billproductcharge]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-nrm-billproductcharge/",
									"FileName": "interim-nrm-billproductcharge-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.billproductcharge"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_contact_medium')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_contact_medium",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[contact_medium]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-cim-contact_medium/",
									"FileName": "interim-cim-contact_medium-20230330T124711Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.contact_medium"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_contact_medium_association')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_contact_medium_association",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[contact_medium_association]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-cim-contact_medium_association/",
									"FileName": "interim-cim-contact_medium_association-20230330T124711Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.contact_medium_association"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_custhasproduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_custhasproduct",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[custhasproduct]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-nrm-custhasproduct/",
									"FileName": "interim-nrm-custhasproduct-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.custhasproduct"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_custhasproduct_key_name')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_custhasproduct_key_name",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[custhasproduct_key_name]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-nrm-custhasproduct_key_name/",
									"FileName": "interim-nrm-custhasproduct_key_name-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.custhasproduct_key_name"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_customer",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[customer]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-cim-customer/",
									"FileName": "interim-cim-customer-20230330T124711Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.customer"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_customer_category')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_customer_category",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[customer_category]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-customer_category/",
									"FileName": "poc-customer_category-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.customer_category"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_custproductdetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_custproductdetails",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[custproductdetails]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-nrm-custproductdetails/",
									"FileName": "interim-nrm-custproductdetails-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.custproductdetails"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_distribution_channel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_distribution_channel",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[distribution_channel]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-distribution_channel/",
									"FileName": "poc-distribution_channel-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.distribution_channel"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_party_role')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_party_role",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[party_role]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-cim-party_role/",
									"FileName": "interim-cim-party_role-20230330T124711Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.party_role"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_phone_numbers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_phone_numbers",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[phone_numbers]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-ri-phone_numbers/",
									"FileName": "interim-ri-phone_numbers-20230330T124712Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.phone_numbers"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_prod_cat_to_prod_offering')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_prod_cat_to_prod_offering",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[prod_cat_to_prod_offering]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-prod_cat_to_prod_offering/",
									"FileName": "poc-prod_cat_to_prod_offering-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.prod_cat_to_prod_offering"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_prod_catalog_bundled_offer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_prod_catalog_bundled_offer",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[prod_catalog_bundled_offer]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-prod_catalog_bundled_offer/",
									"FileName": "poc-prod_catalog_bundled_offer-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.prod_catalog_bundled_offer"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_product_catalog')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_product_catalog",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[product_catalog]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-product_catalog/",
									"FileName": "poc-product_catalog-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.product_catalog"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_product_family')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_product_family",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[product_family]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-product_family/",
									"FileName": "poc-product_family-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.product_family"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_product_instance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_product_instance",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[product_instance]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-ibs-product_instance/",
									"FileName": "interim-ibs-product_instance-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.product_instance"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_product_offering-template')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_product_offering-template",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[product_offering-template]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-product_offering-template/",
									"FileName": "poc-product_offering-template-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.product_offering-template"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_product_offering')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_product_offering",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[product_offering]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-product_offering/",
									"FileName": "poc-product_offering-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.product_offering"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_quote')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_quote",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[quote]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-cpq-quote/",
									"FileName": "interim-cpq-quote-20230330T124711Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.quote"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_quote_item')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_quote_item",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[quote_item]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-cpq-quote_item/",
									"FileName": "interim-cpq-quote_item-20230330T124711Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.quote_item"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_soft_bundled_offering')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_soft_bundled_offering",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[soft_bundled_offering]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-soft_bundled_offering/",
									"FileName": "poc-soft_bundled_offering-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.soft_bundled_offering"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_0_ActiveCustomers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_ActiveCustomers_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_ActiveCustomers_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FACT_1_ActiveCustomers_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/FACT_1_ActiveCustomers_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_0_ChipperIncidentEvents')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_ChipperIncidentEvents_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_ChipperIncidentEvents_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FACT_1_ChipperIncidentEvents_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/FACT_1_ChipperIncidentEvents_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_0_ChipperIncidents')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_ChipperIncidents_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_ChipperIncidents_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FACT_1_ChipperIncidents_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/FACT_1_ChipperIncidents_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_0_OrderEvents')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_OrderEvents_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_OrderEvents_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FACT_1_OrderEvents_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/FACT_1_OrderEvents_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_0_ProductPrices')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_ProductPrices_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_ProductPrices_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FACT_1_ProductPrices_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/FACT_1_ProductPrices_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_0_ProductSubscriptions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_ProductSubscriptions_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_ProductSubscriptions_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FACT_1_ProductSubscriptions_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/FACT_1_ProductSubscriptions_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_0_ProductTransactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Transform",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_ProductTransactions_Transform",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Load",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Transform",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_1_ProductTransactions_Load",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"JobIsIncremental": {
									"value": "@pipeline().parameters.JobIsIncremental",
									"type": "Expression"
								},
								"CleanUpPartitions": {
									"value": "@pipeline().parameters.CleanUpPartitions",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FACT_1_ProductTransactions_Transform')]",
				"[concat(variables('factoryId'), '/pipelines/FACT_1_ProductTransactions_Load')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_ActiveCustomers_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_ActiveCustomers",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadFact]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Fact_ActiveCustomers",
									"type": "String"
								},
								"DWTable": {
									"value": "ActiveCustomers",
									"type": "String"
								},
								"DWSchema": {
									"value": "fact",
									"type": "String"
								},
								"LoadPattern": {
									"value": "FactAdd",
									"type": "String"
								},
								"IncrementalFlag": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"CleanUpPartitionsFlag": {
									"value": {
										"value": "@pipeline().parameters.CleanUpPartitions",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "Bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_ActiveCustomers_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Fact_ActiveCustomers",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Fact_ActiveCustomers",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_ChipperIncidentEvents_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_ChipperIncidentEvents",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadFact]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Fact_ChipperIncidentEvents",
									"type": "String"
								},
								"DWTable": {
									"value": "ChipperIncidentEvents",
									"type": "String"
								},
								"DWSchema": {
									"value": "fact",
									"type": "String"
								},
								"LoadPattern": {
									"value": "FactFull",
									"type": "String"
								},
								"IncrementalFlag": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"CleanUpPartitionsFlag": {
									"value": {
										"value": "@pipeline().parameters.CleanUpPartitions",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "Bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_ChipperIncidentEvents_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Fact_ChipperIncidentEvents",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Fact_ChipperIncidentEvents",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_ChipperIncidents_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_ChipperIncidents",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadFact]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Fact_ChipperIncidents",
									"type": "String"
								},
								"DWTable": {
									"value": "ChipperIncidents",
									"type": "String"
								},
								"DWSchema": {
									"value": "fact",
									"type": "String"
								},
								"LoadPattern": {
									"value": "FactFull",
									"type": "String"
								},
								"IncrementalFlag": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"CleanUpPartitionsFlag": {
									"value": {
										"value": "@pipeline().parameters.CleanUpPartitions",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "Bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_ChipperIncidents_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Fact_ChipperIncidents",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Fact_ChipperIncidents",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_OrderEvents_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_OrderEvents",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadFact]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Fact_OrderEvents",
									"type": "String"
								},
								"DWTable": {
									"value": "OrderEvents",
									"type": "String"
								},
								"DWSchema": {
									"value": "fact",
									"type": "String"
								},
								"LoadPattern": {
									"value": "FactFull",
									"type": "String"
								},
								"IncrementalFlag": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"CleanUpPartitionsFlag": {
									"value": {
										"value": "@pipeline().parameters.CleanUpPartitions",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "Bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_OrderEvents_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Fact_OrderEvents",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Fact_OrderEvents",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_ProductPrices_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_ProductPrices",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadFact]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Fact_ProductPrices",
									"type": "String"
								},
								"DWTable": {
									"value": "ProductPrices",
									"type": "String"
								},
								"DWSchema": {
									"value": "fact",
									"type": "String"
								},
								"LoadPattern": {
									"value": "FactFull",
									"type": "String"
								},
								"IncrementalFlag": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"CleanUpPartitionsFlag": {
									"value": {
										"value": "@pipeline().parameters.CleanUpPartitions",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "Bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_ProductPrices_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Fact_ProductPrices",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Fact_ProductPrices",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_ProductSubscriptions_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_ProductSubscriptions",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadFact]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Fact_ProductSubscriptions",
									"type": "String"
								},
								"DWTable": {
									"value": "ProductSubscriptions",
									"type": "String"
								},
								"DWSchema": {
									"value": "fact",
									"type": "String"
								},
								"LoadPattern": {
									"value": "FactFull",
									"type": "String"
								},
								"IncrementalFlag": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"CleanUpPartitionsFlag": {
									"value": {
										"value": "@pipeline().parameters.CleanUpPartitions",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "Bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_ProductSubscriptions_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Fact_ProductSubscriptions",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Fact_ProductSubscriptions",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_ProductTransactions_Load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Load_ProductTransactions",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[LoadFact]",
							"storedProcedureParameters": {
								"StageTable": {
									"value": "Fact_ProductTransactions",
									"type": "String"
								},
								"DWTable": {
									"value": "ProductTransactions",
									"type": "String"
								},
								"DWSchema": {
									"value": "fact",
									"type": "String"
								},
								"LoadPattern": {
									"value": "FactFull",
									"type": "String"
								},
								"IncrementalFlag": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"CleanUpPartitionsFlag": {
									"value": {
										"value": "@pipeline().parameters.CleanUpPartitions",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					},
					"CleanUpPartitions": {
						"type": "Bool",
						"defaultValue": false
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FACT_1_ProductTransactions_Transform')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TRF_Fact_ProductTransactions",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "stage.Transform_Fact_ProductTransactions",
							"storedProcedureParameters": {
								"JobIsIncremental": {
									"value": {
										"value": "@pipeline().parameters.JobIsIncremental",
										"type": "Expression"
									},
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": true
					}
				},
				"folder": {
					"name": "0.4_Facts"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FAM_0_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FAM_1_DIM",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FAM_1_DIM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FAM_2_FACT",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FAM_1_DIM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FAM_2_FACT",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FAM_3_AS",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FAM_2_FACT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FAM_3_AS",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.0 Solutions/FAM_FaultManagement"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FAM_1_DIM')]",
				"[concat(variables('factoryId'), '/pipelines/FAM_2_FACT')]",
				"[concat(variables('factoryId'), '/pipelines/FAM_3_AS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FAM_1_DIM')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FAM_ChipperIncident",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_FAM_ChipperIncident",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FAM_ChipperStaus",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_FAM_ChipperStatus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FAM_Infrastructure",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_FAM_Infrastructure",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FAM_OpenIncidentsGroup",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_FAM_OpenIncidentsGroup",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FAM_SalesChannel",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_FAM_SalesChannel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FAM_Technology",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_FAM_Technology",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.0 Solutions/FAM_FaultManagement"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_0_FAM_ChipperIncident')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_FAM_ChipperStatus')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_FAM_Infrastructure')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_FAM_OpenIncidentsGroup')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_FAM_SalesChannel')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_FAM_Technology')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FAM_2_FACT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ChipperIncidents",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_0_ChipperIncidents",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "ChipperIncidentEvents",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_0_ChipperIncidentEvents",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "BRIDGE_0_UserAccess",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "BRIDGE_0_UserAccess",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FACT_0_ActiveCustomers",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_0_ActiveCustomers",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.0 Solutions/FAM_FaultManagement"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FACT_0_ChipperIncidents')]",
				"[concat(variables('factoryId'), '/pipelines/FACT_0_ChipperIncidentEvents')]",
				"[concat(variables('factoryId'), '/pipelines/BRIDGE_0_UserAccess')]",
				"[concat(variables('factoryId'), '/pipelines/FACT_0_ActiveCustomers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FAM_3_AS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FaultManagement",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SSAS_Process",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"ModelName": "FaultManagement",
								"RefreshCommand": "{\"Type\":\"Full\",\"CommitMode\":\"transactional\",\"MaxParallelism\":10,\"RetryCount\":2}"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.0 Solutions/FAM_FaultManagement"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SSAS_Process')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FAM_MAN_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FAM_0_Master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DIM_0_Legacy_Customer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_Legacy_Employee",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_Legacy_Product",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "EXT_0_Cubus31_PCTI",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "EXT_0_NuuData_Chipper",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "EXT_0_NuuDL_Columbus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FAM_0_Master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_Legacy_Customer",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_Linkit",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_Legacy_Customer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_Legacy_Employee",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_Cubus_MasterData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_Legacy_Employee",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_Legacy_Product",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_BIZ",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_Legacy_Product",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EXT_0_Cubus31_PCTI",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_0_Cubus31_PCTI",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EXT_0_Cubus_MasterData",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_0_Cubus_MasterData",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EXT_0_NuuData_Chipper",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_0_NuuData_Chipper",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EXT_0_NuuDL_BIZ",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_0_NuuDL_BIZ",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EXT_0_NuuDL_Columbus",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_0_NuuDL_Columbus",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EXT_0_NuuDL_Linkit",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_0_NuuDL_Linkit",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.0 Solutions/FAM_FaultManagement"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FAM_0_Master')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_Legacy_Customer')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_Legacy_Employee')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_Legacy_Product')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_0_Cubus31_PCTI')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_0_Cubus_MasterData')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_0_NuuData_Chipper')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_0_NuuDL_BIZ')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_0_NuuDL_Columbus')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_0_NuuDL_Linkit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MAN_Compare_DimProduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE sourceNuudlBiz.[DimProduct_compare]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "NuuData_Chipper_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "lookup.DimProduct"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceNuudlBiz.[DimProduct_compare]"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.0 Solutions/FAM_FaultManagement/Test"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/NuuData_Chipper_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_bridge_UserAccess')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_bridge_UserAccess",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "bridge",
									"type": "String"
								},
								"DestinationTable": {
									"value": "UserAccess",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_Address')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_Address",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "Address",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_BillingAccount')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_BillingAccount",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "BillingAccount",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_Customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_Customer",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "Customer",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_Employee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_Employee",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "Employee",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_FAM_ChipperIncident')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_FAM_ChipperIncident",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "FAM_ChipperIncident",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_FAM_ChipperStatus')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_FAM_ChipperStatus",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "FAM_ChipperStatus",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_FAM_DatePeriods')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_FAM_DatePeriods",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "FAM_DatePeriods",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_FAM_Infrastructure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_FAM_Infrastructure",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "FAM_Infrastructure",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_FAM_OpenIncidentsGroup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_FAM_OpenIncidentsGroup",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "FAM_OpenIncidentsGroup",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_FAM_SalesChannel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_FAM_SalesChannel",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "FAM_SalesChannel",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_FAM_Technology')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_FAM_Technology",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "FAM_Technology",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_HouseHold')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_HouseHold",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "HouseHold",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_Legacy_Customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_Legacy_Customer",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "Legacy_Customer",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_Legacy_Employee')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_Legacy_Employee",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "Legacy_Employee",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_Legacy_Product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_Legacy_Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "Legacy_Product",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_OrderEvent')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_OrderEvent",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "OrderEvent",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_PhoneDetail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_PhoneDetail",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "PhoneDetail",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_Product')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "Product",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_Quote')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_Quote",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "Quote",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_QuoteItem')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_QuoteItem",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "QuoteItem",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_SalesChannel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_SalesChannel",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "SalesChannel",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_Subscription')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_Subscription",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "Subscription",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_Technology')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_Technology",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "Technology",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_ThirdPartyStore')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_ThirdPartyStore",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "ThirdPartyStore",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_Ticket')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_Ticket",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "Ticket",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_dim_TransactionState')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_dim_TransactionState",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "dim",
									"type": "String"
								},
								"DestinationTable": {
									"value": "TransactionState",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_fact_ActiveCustomers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_fact_ActiveCustomers",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "fact",
									"type": "String"
								},
								"DestinationTable": {
									"value": "ActiveCustomers",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_fact_ChipperIncidentEvents')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_fact_ChipperIncidentEvents",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "fact",
									"type": "String"
								},
								"DestinationTable": {
									"value": "ChipperIncidentEvents",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_fact_ChipperIncidents')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_fact_ChipperIncidents",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "fact",
									"type": "String"
								},
								"DestinationTable": {
									"value": "ChipperIncidents",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_fact_OrderEvents')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_fact_OrderEvents",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "fact",
									"type": "String"
								},
								"DestinationTable": {
									"value": "OrderEvents",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_fact_ProductPrices')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_fact_ProductPrices",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "fact",
									"type": "String"
								},
								"DestinationTable": {
									"value": "ProductPrices",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_fact_ProductSubscriptions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_fact_ProductSubscriptions",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "fact",
									"type": "String"
								},
								"DestinationTable": {
									"value": "ProductSubscriptions",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MaintainDW_fact_ProductTransactions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MaintainDW_fact_ProductTransactions",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[MaintainDW]",
							"storedProcedureParameters": {
								"DestinationSchema": {
									"value": "fact",
									"type": "String"
								},
								"DestinationTable": {
									"value": "ProductTransactions",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.9_Meta"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate_Columbus_AFTALE_LID')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy AFTALE_LID",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.23:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE sourceNuudlColumbus.AFTALE_LID_History",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "NuuData_Columbus_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceNuudlColumbus.AFTALE_LID_History"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceNuudlColumbus.AFTALE_LID_History"
								}
							}
						]
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy AFTALE_LID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Columbus",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "cu",
									"type": "String"
								},
								"SourceTableName": {
									"value": "AFTALE_LID",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.0 Solutions/FAM_FaultManagement/Migration"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/NuuData_Columbus_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate_Columbus_PROD_LID_AFT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy PROD_LID_AFT",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.23:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE sourceNuudlColumbus.PROD_LID_AFT_History",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "NuuData_Columbus_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceNuudlColumbus.PROD_LID_AFT_History"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceNuudlColumbus.PROD_LID_AFT_History"
								}
							}
						]
					},
					{
						"name": "Set_Last_Value_Loaded",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy PROD_LID_AFT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[SetLastLoadedValue]",
							"storedProcedureParameters": {
								"SourceConnectionName": {
									"value": "NuuDL_Columbus",
									"type": "String"
								},
								"SourceSchemaName": {
									"value": "cu",
									"type": "String"
								},
								"SourceTableName": {
									"value": "PROD_LID_AFT",
									"type": "String"
								},
								"WatermarkIsDate": {
									"value": "False",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.0 Solutions/FAM_FaultManagement/Migration"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/NuuData_Columbus_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]",
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate_fact_ActiveCustomers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy Fact ActiveCustomers",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "NuuData_Columbus_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "fact.ActiveCustomers"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "fact.ActiveCustomers"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.0 Solutions/FAM_FaultManagement/Migration"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/NuuData_Columbus_DynamicDataset')]",
				"[concat(variables('factoryId'), '/datasets/nuudwsqldb01_DynamicDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PRX_0_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "PRX_2_FACT",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PRX_2_FACT",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.0 Solutions/PRX_Product_Explorer"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PRX_2_FACT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PRX_2_FACT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FACT_0_OrderEvents",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_0_OrderEvents",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FACT_0_ProductPrices",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_0_ProductPrices",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "FACT_0_ProductSubscriptions",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FACT_0_OrderEvents",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "FACT_0_ProductSubscriptions",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.0 Solutions/PRX_Product_Explorer"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/FACT_0_OrderEvents')]",
				"[concat(variables('factoryId'), '/pipelines/FACT_0_ProductPrices')]",
				"[concat(variables('factoryId'), '/pipelines/FACT_0_ProductSubscriptions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PRX_MAN_Master')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DIM_0_BillingAccount",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_Dawn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_BillingAccount",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_Address",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_NAM",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "EXT_0_NuuDL_Dawn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_Address",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_Customer",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_Nuudl_NetCracker",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "EXT_0_NuuDL_Dawn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_Customer",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_HouseHold",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_Dawn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_HouseHold",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_PhoneDetail",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_Dawn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_PhoneDetail",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_OrderEvent",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_OrderEvent",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_Product",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_Nuudl_NetCracker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_Product",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_Quote",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_Dawn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_Quote",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_SalesChannel",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_Nuudl_NetCracker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_SalesChannel",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_Subscription",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_Dawn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_Subscription",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PRX_0_Master",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "DIM_0_BillingAccount",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_Address",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_Customer",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_HouseHold",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_PhoneDetail",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_OrderEvent",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_Product",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_Quote",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_SalesChannel",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_Subscription",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_Technology",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_Employee",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_Ticket",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DIM_0_QuoteItem",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "PRX_0_Master",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EXT_0_Nuudl_NetCracker",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_NAM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_0_Nuudl_NetCracker",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_Technology",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_Dawn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_Technology",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_Employee",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_BIZ",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_Employee",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_Ticket",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_Dawn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_Ticket",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EXT_0_NuuDL_NAM",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_BIZ",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_0_NuuDL_NAM",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EXT_0_NuuDL_Dawn",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_Nuudl_NetCracker",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_0_NuuDL_Dawn",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "EXT_0_NuuDL_BIZ",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EXT_0_NuuDL_BIZ",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "DIM_0_QuoteItem",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EXT_0_NuuDL_Dawn",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DIM_0_QuoteItem",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "PElogging",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PRX_0_Master",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[nuuMeta].[PEDataLoadLogging]"
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "0.0 Solutions/PRX_Product_Explorer"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/DIM_0_BillingAccount')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_Address')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_Customer')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_HouseHold')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_PhoneDetail')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_OrderEvent')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_Product')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_Quote')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_SalesChannel')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_Subscription')]",
				"[concat(variables('factoryId'), '/pipelines/PRX_0_Master')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_0_Nuudl_NetCracker')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_Technology')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_Employee')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_Ticket')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_0_NuuDL_NAM')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_0_NuuDL_Dawn')]",
				"[concat(variables('factoryId'), '/pipelines/EXT_0_NuuDL_BIZ')]",
				"[concat(variables('factoryId'), '/pipelines/DIM_0_QuoteItem')]",
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SSAS_Process')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start Processing",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Get SSASServerName secret",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:40",
							"retry": 1,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {},
							"url": {
								"value": "@concat('https://westeurope.asazure.windows.net/servers/',activity('Get SSASServerName secret').output.value,'/models/',pipeline().parameters.ModelName,'/refreshes')",
								"type": "Expression"
							},
							"body": {
								"value": "@pipeline().parameters.RefreshCommand",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net"
							}
						}
					},
					{
						"name": "Get Refreshes",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Start Processing",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:40",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://westeurope.asazure.windows.net/servers/',activity('Get SSASServerName secret').output.value,'/models/',pipeline().parameters.ModelName,'/refreshes')",
								"type": "Expression"
							},
							"body": {
								"value": "@pipeline().parameters.RefreshCommand",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://*.asazure.windows.net"
							}
						}
					},
					{
						"name": "Get Latest Refresh",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Refreshes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@json(activity('Get Refreshes').output.Response)",
								"type": "Expression"
							},
							"condition": {
								"value": "@greaterOrEquals(item().startTime,addseconds(activity('Start Processing').output.startTime,-30))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Wait for completion",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Get Latest Refresh",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(equals(activity('Get Refresh Status').output.status,'inProgress'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Wait 15 seconds",
									"type": "Wait",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"waitTimeInSeconds": 15
									}
								},
								{
									"name": "Get Refresh Status",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Wait 15 seconds",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:01:40",
										"retry": 2,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {},
										"url": {
											"value": "@concat('https://westeurope.asazure.windows.net/servers/',activity('Get SSASServerName secret').output.value,'/models/',pipeline().parameters.ModelName,'/refreshes/',first(activity('Get Latest Refresh').output.Value).refreshId)",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://*.asazure.windows.net"
										}
									}
								}
							],
							"timeout": "0.01:00:00"
						}
					},
					{
						"name": "Throw if failed",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Wait for completion",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Refresh Status').output.status,'failed')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Throw",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {},
										"url": {
											"value": "localhost",
											"type": "Expression"
										},
										"body": {
											"value": "@activity('Get Refresh Status').output",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Get SSASServerName secret",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://',replace(pipeline().DataFactory,'adf','kv'),'.vault.azure.net/secrets/SSASServerName?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"ModelName": {
						"type": "string"
					},
					"RefreshCommand": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Toolbox/Azure Analysis Services"
				},
				"annotations": [],
				"lastPublishTime": "2023-08-02T16:25:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SSAS_Resume')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SSASServerName",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.07:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://',replace(pipeline().DataFactory,'adf','kv'),'.vault.azure.net/secrets/SSASServerName?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ResourceGroupName",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.07:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://',replace(pipeline().DataFactory,'adf','kv'),'.vault.azure.net/secrets/ADFResourceGroupName?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SubscriptionID",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.07:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://',replace(pipeline().DataFactory,'adf','kv'),'.vault.azure.net/secrets/ADFSubscriptionID?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Get Azure AS Status",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SSASServerName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ResourceGroupName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SubscriptionID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://management.azure.com/subscriptions/',activity('SubscriptionID').output.value,'/resourceGroups/',activity('ResourceGroupName').output.value,'/providers/Microsoft.AnalysisServices/servers/',activity('SSASServerName').output.value,'?api-version=2017-08-01')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com"
							}
						}
					},
					{
						"name": "Set AAS Status Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Azure AS Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "AASStatus",
							"value": {
								"value": "@activity('Get Azure AS Status').output.properties.state",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If AAS running",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set AAS Status Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('AASStatus'),'Paused')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Resume Azure AS",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {},
										"url": {
											"value": "@concat('https://management.azure.com/subscriptions/',activity('SubscriptionID').output.value,'/resourceGroups/',activity('ResourceGroupName').output.value,'/providers/Microsoft.AnalysisServices/servers/',activity('SSASServerName').output.value,'/resume?api-version=2017-08-01')",
											"type": "Expression"
										},
										"body": {
											"dummy": "dummy"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.azure.com"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"AASStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Toolbox/Azure Analysis Services"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SSAS_Suspend')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SSASServerName",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.07:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://',replace(pipeline().DataFactory,'adf','kv'),'.vault.azure.net/secrets/SSASServerName?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ResourceGroupName",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.07:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://',replace(pipeline().DataFactory,'adf','kv'),'.vault.azure.net/secrets/ADFResourceGroupName?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "SubscriptionID",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.07:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://',replace(pipeline().DataFactory,'adf','kv'),'.vault.azure.net/secrets/ADFSubscriptionID?api-version=7.0')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "Get Azure AS Status",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "SSASServerName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ResourceGroupName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SubscriptionID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "@concat('https://management.azure.com/subscriptions/',activity('SubscriptionID').output.value,'/resourceGroups/',activity('ResourceGroupName').output.value,'/providers/Microsoft.AnalysisServices/servers/',activity('SSASServerName').output.value,'?api-version=2017-08-01')",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://management.azure.com"
							}
						}
					},
					{
						"name": "Set AAS Status Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Azure AS Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "AASStatus",
							"value": {
								"value": "@activity('Get Azure AS Status').output.properties.state",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If AAS running",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set AAS Status Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('AASStatus'),'Succeeded')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Suspend Azure AS",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.01:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {},
										"url": {
											"value": "@concat('https://management.azure.com/subscriptions/',activity('SubscriptionID').output.value,'/resourceGroups/',activity('ResourceGroupName').output.value,'/providers/Microsoft.AnalysisServices/servers/',activity('SSASServerName').output.value,'/suspend?api-version=2017-08-01')",
											"type": "Expression"
										},
										"body": {
											"dummy": "dummy"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://management.azure.com"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"AASStatus": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Toolbox/Azure Analysis Services"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cubus31_PCTI_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Cubus31_PCTI",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					},
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Cubus31_PCTI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cubus_MasterData_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Cubus_Masterdata",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					},
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Cubus_Masterdata')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuDL_BIZ_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nuudl_BIZ",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					},
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nuudl_BIZ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuDL_Columbus_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nuudl_Columbus",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					},
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nuudl_Columbus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuDL_Dawn_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nuudl_Dawn",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					},
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nuudl_Dawn')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuDL_Linkit_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nuudl_Linkit",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					},
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nuudl_Linkit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuDL_UnityCatalog_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NuuDL_UnityCatalog",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					},
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NuuDL_UnityCatalog')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuData_Chipper_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NuuData_Chipper",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					},
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NuuData_Chipper')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuData_Columbus_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NuuData_Columbus",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					},
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NuuData_Columbus')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuDL_NAM_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "NuuDL_NAM",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					},
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/NuuDL_NAM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Nuudl_NetCracker_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Nuudl_NetCracker",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "AzureDatabricksDeltaLakeDataset",
				"typeProperties": {
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					},
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Nuudl_NetCracker')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalake01ingestionNetcracker_interim_Avro_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalake01ingestionNetcracker_interim",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileSystemName": {
						"type": "string",
						"defaultValue": "dummy"
					},
					"FolderName": {
						"type": "string",
						"defaultValue": "dummy"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "dummy"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"TextQualifier": {
						"type": "string",
						"defaultValue": "\""
					},
					"EscapeCharacter": {
						"type": "string",
						"defaultValue": "\\"
					},
					"IsHeaderPresent": {
						"type": "bool",
						"defaultValue": true
					},
					"CompressionCodec": {
						"type": "string",
						"defaultValue": "none"
					},
					"Encoding": {
						"type": "string",
						"defaultValue": "UTF-8"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "Avro",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FileSystemName",
							"type": "Expression"
						}
					},
					"avroCompressionCodec": {
						"value": "@dataset().CompressionCodec",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalake01ingestionNetcracker_interim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalake01ingestionNetcracker_interim_DelimitedText_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalake01ingestionNetcracker_interim",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileSystemName": {
						"type": "string",
						"defaultValue": "dummy"
					},
					"FolderName": {
						"type": "string",
						"defaultValue": "dummy"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "dummy"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"TextQualifier": {
						"type": "string",
						"defaultValue": "\""
					},
					"EscapeCharacter": {
						"type": "string",
						"defaultValue": "\\"
					},
					"IsHeaderPresent": {
						"type": "bool",
						"defaultValue": true
					},
					"CompressionCodec": {
						"type": "string",
						"defaultValue": "none"
					},
					"Encoding": {
						"type": "string",
						"defaultValue": "UTF-8"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FileSystemName",
							"type": "Expression"
						}
					},
					"columnDelimiter": {
						"value": "@dataset().ColumnDelimiter",
						"type": "Expression"
					},
					"compressionCodec": {
						"value": "@dataset().CompressionCodec",
						"type": "Expression"
					},
					"encodingName": {
						"value": "@dataset().Encoding",
						"type": "Expression"
					},
					"escapeChar": {
						"value": "@dataset().EscapeCharacter",
						"type": "Expression"
					},
					"firstRowAsHeader": {
						"value": "@dataset().IsHeaderPresent",
						"type": "Expression"
					},
					"quoteChar": {
						"value": "@dataset().TextQualifier",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalake01ingestionNetcracker_interim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalake01ingestionNetcracker_interim_Orc_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalake01ingestionNetcracker_interim",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileSystemName": {
						"type": "string",
						"defaultValue": "dummy"
					},
					"FolderName": {
						"type": "string",
						"defaultValue": "dummy"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "dummy"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"TextQualifier": {
						"type": "string",
						"defaultValue": "\""
					},
					"EscapeCharacter": {
						"type": "string",
						"defaultValue": "\\"
					},
					"IsHeaderPresent": {
						"type": "bool",
						"defaultValue": true
					},
					"CompressionCodec": {
						"type": "string",
						"defaultValue": "none"
					},
					"Encoding": {
						"type": "string",
						"defaultValue": "UTF-8"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "Orc",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FileSystemName",
							"type": "Expression"
						}
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalake01ingestionNetcracker_interim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalake01ingestionNetcracker_interim_Parquet_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalake01ingestionNetcracker_interim",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileSystemName": {
						"type": "string",
						"defaultValue": "dummy"
					},
					"FolderName": {
						"type": "string",
						"defaultValue": "dummy"
					},
					"FileName": {
						"type": "string",
						"defaultValue": "dummy"
					},
					"ColumnDelimiter": {
						"type": "string",
						"defaultValue": ","
					},
					"TextQualifier": {
						"type": "string",
						"defaultValue": "\""
					},
					"EscapeCharacter": {
						"type": "string",
						"defaultValue": "\\"
					},
					"IsHeaderPresent": {
						"type": "bool",
						"defaultValue": true
					},
					"CompressionCodec": {
						"type": "string",
						"defaultValue": "none"
					},
					"Encoding": {
						"type": "string",
						"defaultValue": "UTF-8"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().FolderName",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().FileSystemName",
							"type": "Expression"
						}
					},
					"compressionCodec": {
						"value": "@dataset().CompressionCodec",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalake01ingestionNetcracker_interim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingestsqldb01_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ingestsqldb01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					},
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ingestsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/nuudwsqldb01_DynamicDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "nuudwsqldb01",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "DynamicDatasets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@replace(replace(split(dataset().TableName,'.')[0],'[',''),']','')",
						"type": "Expression"
					},
					"table": {
						"value": "@replace(replace(split(dataset().TableName,'.')[1],'[',''),']','')",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/nuudwsqldb01')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cubus31_PCTI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Created by milank@nuuday.dk 2023-06-22",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('Cubus31_PCTI_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "NuuDW-OnPremiseIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/NuuDW-OnPremiseIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cubus_Masterdata')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Created by milan@nuuday.dk 2023-06-22 ",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('Cubus_Masterdata_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "NuuDW-OnPremiseIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/NuuDW-OnPremiseIntegrationRuntime')]",
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/KeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('KeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuDL_NAM')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-2929753254893719.19.azuredatabricks.net",
					"clusterId": "0905-134532-2jn7av69",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "databrickstoken"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuDL_UnityCatalog')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-2929753254893719.19.azuredatabricks.net",
					"clusterId": "0905-134532-2jn7av69",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "databrickstoken"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuData_Chipper')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('NuuData_Chipper_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuData_Columbus')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('NuuData_Columbus_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Nuudl_BIZ')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-2929753254893719.19.azuredatabricks.net",
					"clusterId": "0905-134532-2jn7av69",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "databrickstoken"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Nuudl_Columbus')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-5766851830059509.9.azuredatabricks.net",
					"clusterId": "0111-130909-iqv8kbwp",
					"workspaceResourceId": "/subscriptions/f1dd3e21-b687-4062-9de2-b55be2eed76f/resourceGroups/datalake-rg01-exploration-product/providers/Microsoft.Databricks/workspaces/datalake-dbw01-explor-product"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Nuudl_Dawn')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-2929753254893719.19.azuredatabricks.net",
					"clusterId": "0905-134532-2jn7av69",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "databrickstoken"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Nuudl_Linkit')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-5766851830059509.9.azuredatabricks.net",
					"clusterId": "0111-130909-iqv8kbwp",
					"workspaceResourceId": "/subscriptions/f1dd3e21-b687-4062-9de2-b55be2eed76f/resourceGroups/datalake-rg01-exploration-product/providers/Microsoft.Databricks/workspaces/datalake-dbw01-explor-product"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Nuudl_NetCracker')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricksDeltaLake",
				"typeProperties": {
					"domain": "https://adb-2929753254893719.19.azuredatabricks.net",
					"clusterId": "0905-134532-2jn7av69",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "databrickstoken"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalake01ingestion')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('datalake01ingestion_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "Variable-AccountKey-DataLake01Ingestion"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalake01ingestionNetcracker_interim')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('datalake01ingestionNetcracker_interim_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "Variable-AccountKey-DataLake01Ingestion"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalakest01exploration')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "To stage data from Delta Lake",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('datalakest01exploration_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "Variable-AccountKey-datalakest01exploration"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ingestsqldb01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Metadata for nuudl datalake",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('ingestsqldb01_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/nuudwsqldb01')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "KeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('nuudwsqldb01_properties_typeProperties_connectionString_secretName')]"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PRX_Starter')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "PRX_MAN_Master",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2024-08-01T06:30:00",
						"timeZone": "Romance Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/PRX_MAN_Master')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SSAS_Suspend')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "SSAS_Suspend",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-08-25T08:26:00",
						"timeZone": "Romance Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								16
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/SSAS_Suspend')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NuuDW-OnPremiseIntegrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {
					"linkedInfo": {
						"resourceId": "[parameters('NuuDW-OnPremiseIntegrationRuntime_properties_typeProperties_linkedInfo_resourceId')]",
						"authorizationType": "Rbac"
					}
				}
			},
			"dependsOn": []
		}
	]
}