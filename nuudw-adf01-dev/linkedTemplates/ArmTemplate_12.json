{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "nuudw-adf01-dev"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ExtractInformationSchema_datalake01ingestionNetcracker_interim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Maintain Extract Create Schemas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[meta].[MaintainExtractCreateSchemas]",
							"storedProcedureParameters": {
								"ExtractSchemaName": {
									"value": "sourceDataLakeNetcracker_interim",
									"type": "String"
								},
								"PrintSQL": {
									"value": "false",
									"type": "Boolean"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "nuudwsqldb01",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LKP Objects",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP Maintain Extract Create Schemas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \n\tSourceObjectID\n        ,ConnectionType\n\t,FileExtension\n\t,FileSystem AS FileSystemName\n\t,FileName\n\t,concat(FileName,'.',FileExtension) AS FullFileName\n\t,Folder\n\t,TargetDestinationFlag\n\t,FileSpecification\n\t,RowSeparator\n\t,ColumnDelimiter\n\t,TextQualifier\n\t,IsHeaderPresent\n\t,Encoding\n\t,LoopFile\n  FROM [meta].[SourceObjectDefinitions]\n  WHERE ConnectionName = 'datalake01ingestionNetcracker_interim'",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "meta.SourceObjectDefinitions"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Object",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LKP Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LKP Objects').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "If Parquet",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(\ntoLower(item().FileExtension),'parquet'\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "GetMetadata Parquet",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
														"type": "DatasetReference",
														"parameters": {
															"FileSystemName": {
																"value": "@item().FileSystemName",
																"type": "Expression"
															},
															"FolderName": {
																"value": "@item().Folder",
																"type": "Expression"
															},
															"FileName": {
																"value": "@item().FullFileName",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"itemName",
														"structure",
														"columnCount"
													],
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true
													}
												}
											},
											{
												"name": "Maintain Extract Information Schema Parquet",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "GetMetadata Parquet",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtractInformationSchemaFromJsonMeta]",
													"storedProcedureParameters": {
														"JsonOutput": {
															"value": {
																"value": "@string(activity('GetMetadata Parquet').output)",
																"type": "Expression"
															},
															"type": "String"
														},
														"SourceObjectID": {
															"value": {
																"value": "@item().SourceObjectID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "SP Maintain Extract Parquet",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Maintain Extract Information Schema Parquet",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtract]",
													"storedProcedureParameters": {
														"SourceObjectID": {
															"value": {
																"value": "@{item().SourceObjectID}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"DropTable": {
															"value": "true",
															"type": "Boolean"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "If Avro",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(\ntoLower(item().FileExtension),'avro'\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "GetMetadata Avro",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "datalake01ingestionNetcracker_interim_Avro_DynamicDataset",
														"type": "DatasetReference",
														"parameters": {
															"FileSystemName": {
																"value": "@item().FileSystemName",
																"type": "Expression"
															},
															"FolderName": {
																"value": "@item().Folder",
																"type": "Expression"
															},
															"FileName": {
																"value": "@item().FullFileName",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"itemName",
														"structure",
														"columnCount"
													],
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true
													}
												}
											},
											{
												"name": "Maintain Extract Information Schema Avro",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "GetMetadata Avro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtractInformationSchemaFromJsonMeta]",
													"storedProcedureParameters": {
														"JsonOutput": {
															"value": {
																"value": "@string(activity('GetMetadata Avro').output)",
																"type": "Expression"
															},
															"type": "String"
														},
														"SourceObjectID": {
															"value": {
																"value": "@item().SourceObjectID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "SP Maintain Extract Avro",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Maintain Extract Information Schema Avro",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtract]",
													"storedProcedureParameters": {
														"SourceObjectID": {
															"value": {
																"value": "@{item().SourceObjectID}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"DropTable": {
															"value": "true",
															"type": "Boolean"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "If Orc",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(\ntoLower(item().FileExtension),'orc'\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "GetMetadata Orc",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "datalake01ingestionNetcracker_interim_Orc_DynamicDataset",
														"type": "DatasetReference",
														"parameters": {
															"FileSystemName": {
																"value": "@item().FileSystemName",
																"type": "Expression"
															},
															"FolderName": {
																"value": "@item().Folder",
																"type": "Expression"
															},
															"FileName": {
																"value": "@item().FullFileName",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"itemName",
														"structure",
														"columnCount"
													],
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true
													}
												}
											},
											{
												"name": "Maintain Extract Information Schema Orc",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "GetMetadata Orc",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtractInformationSchemaFromJsonMeta]",
													"storedProcedureParameters": {
														"JsonOutput": {
															"value": {
																"value": "@string(activity('GetMetadata Orc').output)",
																"type": "Expression"
															},
															"type": "String"
														},
														"SourceObjectID": {
															"value": {
																"value": "@item().SourceObjectID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "SP Maintain Extract Orc",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Maintain Extract Information Schema Orc",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtract]",
													"storedProcedureParameters": {
														"SourceObjectID": {
															"value": {
																"value": "@{item().SourceObjectID}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"DropTable": {
															"value": "true",
															"type": "Boolean"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "If Delimited Text",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(\ntoLower(item().FileExtension),'csv'\n)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "GetMetadata DelimitedText",
												"type": "GetMetadata",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "datalake01ingestionNetcracker_interim_DelimitedText_DynamicDataset",
														"type": "DatasetReference",
														"parameters": {
															"FileSystemName": {
																"value": "@item().FileSystemName",
																"type": "Expression"
															},
															"FolderName": {
																"value": "@item().Folder",
																"type": "Expression"
															},
															"FileName": {
																"value": "@item().FullFileName",
																"type": "Expression"
															},
															"ColumnDelimiter": {
																"value": "@item().ColumnDelimiter",
																"type": "Expression"
															},
															"TextQualifier": {
																"value": "@item().TextQualifier",
																"type": "Expression"
															},
															"IsHeaderPresent": {
																"value": "@item().IsHeaderPresent",
																"type": "Expression"
															},
															"Encoding": {
																"value": "@item().Encoding",
																"type": "Expression"
															}
														}
													},
													"fieldList": [
														"itemName",
														"structure",
														"columnCount"
													],
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true
													}
												}
											},
											{
												"name": "Maintain Extract Information Schema DelimitedText",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "GetMetadata DelimitedText",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtractInformationSchemaFromJsonMeta]",
													"storedProcedureParameters": {
														"JsonOutput": {
															"value": {
																"value": "@string(activity('GetMetadata DelimitedText').output)",
																"type": "Expression"
															},
															"type": "String"
														},
														"SourceObjectID": {
															"value": {
																"value": "@item().SourceObjectID",
																"type": "Expression"
															},
															"type": "Int32"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "SP Maintain Extract DelimitedText",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Maintain Extract Information Schema DelimitedText",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[meta].[MaintainExtract]",
													"storedProcedureParameters": {
														"SourceObjectID": {
															"value": {
																"value": "@{item().SourceObjectID}",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"DropTable": {
															"value": "true",
															"type": "Boolean"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "nuudwsqldb01",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "6.Meta"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_acchasonetimecharge')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_acchasonetimecharge",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[acchasonetimecharge]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-nrm-acchasonetimecharge/",
									"FileName": "interim-nrm-acchasonetimecharge-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.acchasonetimecharge"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_adjustment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_adjustment",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[adjustment]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-nrm-adjustment/",
									"FileName": "interim-nrm-adjustment-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.adjustment"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_billproductcharge')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_billproductcharge",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[billproductcharge]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-nrm-billproductcharge/",
									"FileName": "interim-nrm-billproductcharge-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.billproductcharge"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_contact_medium')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_contact_medium",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[contact_medium]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-cim-contact_medium/",
									"FileName": "interim-cim-contact_medium-20230330T124711Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.contact_medium"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_contact_medium_association')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_contact_medium_association",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[contact_medium_association]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-cim-contact_medium_association/",
									"FileName": "interim-cim-contact_medium_association-20230330T124711Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.contact_medium_association"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_custhasproduct')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_custhasproduct",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[custhasproduct]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-nrm-custhasproduct/",
									"FileName": "interim-nrm-custhasproduct-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.custhasproduct"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_custhasproduct_key_name')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_custhasproduct_key_name",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[custhasproduct_key_name]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-nrm-custhasproduct_key_name/",
									"FileName": "interim-nrm-custhasproduct_key_name-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.custhasproduct_key_name"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_customer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_customer",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[customer]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-cim-customer/",
									"FileName": "interim-cim-customer-20230330T124711Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.customer"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_customer_category')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_customer_category",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[customer_category]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-customer_category/",
									"FileName": "poc-customer_category-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.customer_category"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_custproductdetails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_custproductdetails",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[custproductdetails]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-nrm-custproductdetails/",
									"FileName": "interim-nrm-custproductdetails-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.custproductdetails"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_distribution_channel')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_distribution_channel",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[distribution_channel]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-distribution_channel/",
									"FileName": "poc-distribution_channel-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.distribution_channel"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_party_role')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_party_role",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[party_role]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-cim-party_role/",
									"FileName": "interim-cim-party_role-20230330T124711Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.party_role"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_phone_numbers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_phone_numbers",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[phone_numbers]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-ri-phone_numbers/",
									"FileName": "interim-ri-phone_numbers-20230330T124712Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.phone_numbers"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_prod_cat_to_prod_offering')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_prod_cat_to_prod_offering",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[prod_cat_to_prod_offering]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-prod_cat_to_prod_offering/",
									"FileName": "poc-prod_cat_to_prod_offering-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.prod_cat_to_prod_offering"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_prod_catalog_bundled_offer')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_prod_catalog_bundled_offer",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[prod_catalog_bundled_offer]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-prod_catalog_bundled_offer/",
									"FileName": "poc-prod_catalog_bundled_offer-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.prod_catalog_bundled_offer"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_product_catalog')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_product_catalog",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[product_catalog]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-product_catalog/",
									"FileName": "poc-product_catalog-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.product_catalog"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_product_family')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_product_family",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[product_family]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-product_family/",
									"FileName": "poc-product_family-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.product_family"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_product_instance')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_product_instance",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[product_instance]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/interim-ibs-product_instance/",
									"FileName": "interim-ibs-product_instance-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.product_instance"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExtractsourceDataLakeNetcracker_interim_product_offering-template')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_product_offering-template",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource"
							},
							"sink": {
								"type": "SqlSink",
								"writeBatchSize": {
									"value": "@pipeline().parameters.WriteBatchSize",
									"type": "Expression"
								},
								"preCopyScript": "TRUNCATE TABLE [sourceDataLakeNetcracker_interim].[product_offering-template]"
							},
							"enableStaging": false,
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "datalake01ingestionNetcracker_interim_Parquet_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"FileSystemName": "raw",
									"FolderName": "netcracker_interim/poc-product_offering-template/",
									"FileName": "poc-product_offering-template-20230330T124710Z.parquet",
									"ColumnDelimiter": "\t",
									"TextQualifier": "\"",
									"IsHeaderPresent": "False"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "nuudwsqldb01_DynamicDataset",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "sourceDataLakeNetcracker_interim.product_offering-template"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"JobIsIncremental": {
						"type": "Bool",
						"defaultValue": false
					},
					"WriteBatchSize": {
						"type": "Int",
						"defaultValue": 10000
					}
				},
				"folder": {
					"name": "Extract/Extract_datalake01ingestionNetcracker_interim"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}